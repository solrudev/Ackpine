{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Ackpine - Android Coroutines-friendly Kotlin-first Package Installer extensions</p> <p>A library providing consistent APIs for installing and uninstalling apps on an Android device.</p> <p>Key features of Ackpine:</p> <ul> <li>Ease of use: Ackpine reduces complexity of dealing with system <code>PackageInstaller</code> APIs.</li> <li>Unifying of different system APIs: Ackpine provides an ability to choose system package installer API which will be used to install a package.</li> <li>Built-in split APKs support: Ackpine provides simple lazy sequences-based APIs for reading, parsing and filtering split APKs.</li> <li>Persistent: Ackpine persists every session so it can properly handle process death.</li> <li>Deferred: Ackpine allows to defer user's intervention via customizable high-priority notification.</li> <li>Progress and state updates: it's easy to observe every session's state and progress updates.</li> <li>100% Java and Kotlin-friendly: while maintaining full Java compatibility, Ackpine was developed as a Kotlin-first library.</li> <li>Compatibility: Ackpine supports Android versions starting from API level 16.</li> </ul>"},{"location":"#download","title":"Download","text":"<p>Ackpine is available on <code>mavenCentral()</code>.</p> <p>Ackpine depends on Jetpack libraries, so it's also necessary to add the <code>google()</code> Maven repository.</p> Gradle version catalogbuild.gradle.kts <pre><code>[versions]\nackpine = \"0.15.3\"\n\n[libraries]\nackpine-core = { module = \"ru.solrudev.ackpine:ackpine-core\", version.ref = \"ackpine\" }\n\n# optional - Kotlin extensions and Coroutines support\nackpine-ktx = { module = \"ru.solrudev.ackpine:ackpine-ktx\", version.ref = \"ackpine\" }\n\n# optional - utilities for working with split APKs\nackpine-splits = { module = \"ru.solrudev.ackpine:ackpine-splits\", version.ref = \"ackpine\" }\n\n# optional - Kotlin extensions and Coroutines support for ackpine-splits\nackpine-splits-ktx = { module = \"ru.solrudev.ackpine:ackpine-splits-ktx\", version.ref = \"ackpine\" }\n\n# optional - support for asset files inside of application's package\nackpine-assets = { module = \"ru.solrudev.ackpine:ackpine-assets\", version.ref = \"ackpine\" }\n\n# optional - plugin enabling installs through Shizuku\nackpine-shizuku = { module = \"ru.solrudev.ackpine:ackpine-shizuku\", version.ref = \"ackpine\" }\n\n# optional - Kotlin extensions for Shizuku plugin\nackpine-shizuku-ktx = { module = \"ru.solrudev.ackpine:ackpine-shizuku-ktx\", version.ref = \"ackpine\" }\n\n[bundles]\nackpine = [\n    \"ackpine-core\",\n    \"ackpine-ktx\",\n    \"ackpine-splits\",\n    \"ackpine-splits-ktx\",\n    \"ackpine-assets\",\n    \"ackpine-shizuku\",\n    \"ackpine-shizuku-ktx\"\n]\n</code></pre> <pre><code>dependencies {\n    val ackpineVersion = \"0.15.3\"\n    implementation(\"ru.solrudev.ackpine:ackpine-core:$ackpineVersion\")\n\n    // optional - Kotlin extensions and Coroutines support\n    implementation(\"ru.solrudev.ackpine:ackpine-ktx:$ackpineVersion\")\n\n    // optional - utilities for working with split APKs\n    implementation(\"ru.solrudev.ackpine:ackpine-splits:$ackpineVersion\")\n\n    // optional - Kotlin extensions and Coroutines support for ackpine-splits\n    implementation(\"ru.solrudev.ackpine:ackpine-splits-ktx:$ackpineVersion\")\n\n    // optional - support for asset files inside of application's package\n    implementation(\"ru.solrudev.ackpine:ackpine-assets:$ackpineVersion\")\n\n    // optional - plugin enabling installs through Shizuku\n    implementation(\"ru.solrudev.ackpine:ackpine-shizuku:$ackpineVersion\")\n\n    // optional - Kotlin extensions for Shizuku plugin\n    implementation(\"ru.solrudev.ackpine:ackpine-shizuku-ktx:$ackpineVersion\")\n}\n</code></pre>"},{"location":"#license","title":"License","text":"<pre><code>Copyright (C) 2023-2025 Ilya Fomichev\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"architecture/","title":"Architecture","text":"<p>Ackpine library has a concept of <code>Session</code>. <code>Session</code> manages the flow of installation or uninstallation process.</p> <p>One can launch multiple different sessions at once, but can't create them directly. To create a session, one needs to use <code>PackageInstaller</code> or <code>PackageUninstaller</code>.</p> <p>In essence, <code>PackageInstaller</code> is a repository of <code>ProgressSessions</code>, and <code>PackageUninstaller</code> is a repository of <code>Sessions</code>. They track and persist every session launched.</p> <p>Session by itself is passive, it doesn't do anything until client code says so. One can say that session is a finite-state machine which transfers from one state to another, but for this to be possible client needs to react to state changes and call necessary methods on the session. This is done to make sessions persistable and suspendable.</p> <p>If any of the steps while the session is active is interrupted (e.g. with process death), it can be re-executed later by examining last session's state and executing the steps which weren't finished. The library provides ready-to-use implementations of such listeners in the form of <code>Session.TerminalStateListener</code> and <code>Session.await()</code>. They can be safely re-attached after interruption.</p> <p><code>Uri</code> is chosen as a sole input type of APKs. It makes them persistable and allows to plug in any APK source via <code>ContentProvider</code>. The library leverages this in <code>ackpine-splits</code> and <code>ackpine-assets</code> modules to read APKs from zipped files and app's asset files respectively.</p>"},{"location":"building/","title":"Building","text":"<p>Root <code>Ackpine</code> project has the following Gradle tasks:</p> <ul> <li><code>:buildAckpine</code>: a lifecycle task which builds release AARs of all Ackpine library projects;</li> <li><code>:buildSamples</code>: a lifecycle task which builds and gathers release versions of all Ackpine sample app APKs and R8 mappings into <code>release</code> directory;</li> <li><code>:releaseChangelog</code>: an actionable task which extracts changelog for the last release from <code>docs/changelog.md</code> file to <code>changelog.txt</code>.</li> </ul> <p>Other useful tasks provided by third-party Gradle plugins:</p> <ul> <li><code>:api-documentation:dokkaGenerate</code>: generates API documentation for the library projects and places it into <code>docs/api</code> directory;</li> <li><code>apiCheck</code>: validates public API surface of the library projects against dumps;</li> <li><code>apiDump</code>: dumps public API surface of the library projects;</li> <li><code>publishAndReleaseToMavenCentral</code>: publishes the library projects to Maven Central repository. For further information see plugin's documentation.</li> </ul> <p>Projects are added to <code>:buildAckpine</code> and <code>:buildSamples</code> tasks through <code>dependencies</code> block in root <code>build.gradle.kts</code>. Library project should have <code>ru.solrudev.ackpine.library</code> Gradle plugin applied, and sample app project should have <code>ru.solrudev.ackpine.app-release</code> Gradle plugin applied.</p> <p>Projects are added to <code>:api-documentation:dokkaGenerate</code> task through <code>dependencies</code> block in <code>build.gradle.kts</code> of <code>api-documentation</code> project. Documented project should have <code>ru.solrudev.ackpine.dokka</code> Gradle plugin applied.</p> <p>To serve documentation website on localhost, execute this command (requires Python 3 and Material for MkDocs to be installed): <pre><code>mkdocs serve\n</code></pre></p> <p>To build release versions of sample apps you'll need to provide a keystore. For this, create a <code>keystore.properties</code> file in the root directory with the following contents: <pre><code>APP_SIGNING_KEY_ALIAS=YOUR_KEY_ALIAS\nAPP_SIGNING_KEY_PASSWORD=YOUR_KEY_PASSWORD\nAPP_SIGNING_KEY_STORE_PASSWORD=YOUR_KEYSTORE_PASSWORD\nAPP_SIGNING_KEY_STORE_PATH=PATH_TO_YOUR_KEYSTORE_FILE\n</code></pre> The other way to provide these values is through environment variables. <code>keystore.properties</code> file takes precedence over environment variables.</p>"},{"location":"changelog/","title":"Change Log","text":""},{"location":"changelog/#version-0153-2025-08-21","title":"Version 0.15.3 (2025-08-21)","text":""},{"location":"changelog/#bug-fixes-and-improvements","title":"Bug fixes and improvements","text":"<ul> <li>Hotfix: add ProGuard rules for Ackpine Compress.</li> </ul>"},{"location":"changelog/#version-0152-2025-08-21","title":"Version 0.15.2 (2025-08-21)","text":""},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Updated Apache Commons IO to 2.20.0 (<code>ackpine-compress-android</code>).</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_1","title":"Bug fixes and improvements","text":"<ul> <li>Pull changes from Apache Commons Compress 1.28.0 to Ackpine Compress fork.</li> </ul>"},{"location":"changelog/#version-0151-2025-08-13","title":"Version 0.15.1 (2025-08-13)","text":""},{"location":"changelog/#bug-fixes-and-improvements_2","title":"Bug fixes and improvements","text":"<ul> <li>Improve error handling in install sessions.</li> </ul>"},{"location":"changelog/#version-0150-2025-08-07","title":"Version 0.15.0 (2025-08-07)","text":""},{"location":"changelog/#dependencies_1","title":"Dependencies","text":"<ul> <li>Updated <code>androidx.concurrent</code> to 1.3.0.</li> <li>Updated <code>apksig</code> to 8.12.0.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_3","title":"Bug fixes and improvements","text":"<ul> <li>Add <code>fallbackToOnDemandApproval</code> parameter for pre-approvals. See documentation for details.</li> <li>Raise <code>InstallParameters.plugins</code> deprecation level to error.</li> <li>Improvements for file picking in sample apps.</li> </ul>"},{"location":"changelog/#public-api-changes","title":"Public API changes","text":"<ul> <li>Added <code>fallbackToOnDemandApproval</code> property to <code>InstallPreapproval</code>, <code>InstallPreapproval.Builder</code> and <code>InstallPreapprovalDsl</code>.</li> <li>Raised deprecation level to error for <code>InstallParameters.plugins</code> property.</li> </ul>"},{"location":"changelog/#version-0140-2025-06-27","title":"Version 0.14.0 (2025-06-27)","text":""},{"location":"changelog/#bug-fixes-and-improvements_4","title":"Bug fixes and improvements","text":"<ul> <li>Rename <code>InstallParameters.plugins</code> to <code>InstallParameters.pluginContainer</code>.</li> <li>Use direct calls instead of reflection in Shizuku plugin.</li> <li>Make all Android resources private in <code>ackpine-runtime</code> module.</li> </ul>"},{"location":"changelog/#public-api-changes_1","title":"Public API changes","text":"<ul> <li>Added <code>InstallParameters.pluginContainer</code> property.</li> <li>Deprecated with warning <code>InstallParameters.plugins</code> property.</li> </ul>"},{"location":"changelog/#version-0132-2025-06-10","title":"Version 0.13.2 (2025-06-10)","text":""},{"location":"changelog/#bug-fixes-and-improvements_5","title":"Bug fixes and improvements","text":"<ul> <li>Prevent crashing the whole app on main thread if Shizuku is used when Shizuku service dies, instead only complete an install session with exception.</li> </ul>"},{"location":"changelog/#version-0131-2025-06-05","title":"Version 0.13.1 (2025-06-05)","text":""},{"location":"changelog/#bug-fixes-and-improvements_6","title":"Bug fixes and improvements","text":"<ul> <li>Add static <code>DEFAULT</code> field to <code>ShizukuPlugin</code> parameters.</li> <li>Make all Android resources private in <code>ackpine-core</code> module.</li> <li>Remove <code>UPDATE_PACKAGES_WITHOUT_USER_ACTION</code> and <code>ENFORCE_UPDATE_OWNERSHIP</code> permissions from sample apps.</li> </ul>"},{"location":"changelog/#public-api-changes_2","title":"Public API changes","text":"<ul> <li>Added static <code>DEFAULT</code> field to <code>ShizukuPlugin.Parameters</code>.</li> </ul>"},{"location":"changelog/#version-0130-2025-06-02","title":"Version 0.13.0 (2025-06-02)","text":""},{"location":"changelog/#dependencies_2","title":"Dependencies","text":"<ul> <li>Updated <code>apksig</code> to 8.10.1.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_7","title":"Bug fixes and improvements","text":"<ul> <li>Add ability to use Shizuku for install sessions via <code>ShizukuPlugin</code> in <code>ackpine-shizuku</code> artifact. See documentation for details.</li> <li><code>ackpine-splits</code>: Don't fall back to <code>ZipInputStream</code> if reading of zipped file fails and throw instead.</li> <li>Sample apps: don't restart installation if app was launched through an <code>ACTION_VIEW</code> intent when launching from recent apps history.</li> <li>Sample apps: fix reappearing install session when last install session is removed.</li> </ul>"},{"location":"changelog/#public-api-changes_3","title":"Public API changes","text":"<ul> <li>Added <code>AckpinePlugin</code>, <code>AckpinePlugin.Parameters</code>, <code>AckpinePluginContainer</code> types in <code>ackpine-api</code>.</li> <li>Added <code>usePlugin</code> function to <code>InstallParameters.Builder</code>, <code>InstallParametersDsl</code>.</li> <li>Added <code>plugins</code> property to <code>InstallParameters</code>.</li> <li>Added <code>ackpine-shizuku</code> and <code>ackpine-shizuku-ktx</code> modules.</li> </ul>"},{"location":"changelog/#version-0122-2025-05-20","title":"Version 0.12.2 (2025-05-20)","text":""},{"location":"changelog/#dependencies_3","title":"Dependencies","text":"<ul> <li>Updated Kotlin to 2.1.21.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_8","title":"Bug fixes and improvements","text":"<ul> <li>Prevent confirmation notifications from automatic grouping to avoid user clicking on the group, leaving sessions in hanging state.</li> </ul>"},{"location":"changelog/#version-0121-2025-05-16","title":"Version 0.12.1 (2025-05-16)","text":""},{"location":"changelog/#dependencies_4","title":"Dependencies","text":"<ul> <li><code>ackpine-splits</code> now depends on <code>ackpine-compress-android</code> instead of Apache Commons Compress.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_9","title":"Bug fixes and improvements","text":"<ul> <li>Random access reading of zipped APK splits is now supported on API &lt; 26 without <code>READ_EXTERNAL_STORAGE</code> permission (#83).</li> </ul>"},{"location":"changelog/#version-0120-2025-05-05","title":"Version 0.12.0 (2025-05-05)","text":""},{"location":"changelog/#dependencies_5","title":"Dependencies","text":"<ul> <li>Updated <code>apksig</code> to 8.9.2.</li> <li>Updated <code>kotlinx.coroutines</code> to 1.10.2.</li> </ul>"},{"location":"changelog/#public-api-changes_4","title":"Public API changes","text":"<ul> <li>Removed deprecated APIs from <code>ackpine-splits</code>.</li> <li>Moved <code>AckpineReinitializeException</code> from <code>ackpine-api</code> to <code>ackpine-core</code>.</li> </ul>"},{"location":"changelog/#version-0112-2025-04-19","title":"Version 0.11.2 (2025-04-19)","text":""},{"location":"changelog/#dependencies_6","title":"Dependencies","text":"<ul> <li>Extracted <code>ackpine-api</code> artifact, which is now depended upon by <code>ackpine-core</code> and <code>ackpine-ktx</code>.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_10","title":"Bug fixes and improvements","text":"<ul> <li>Extract <code>ackpine-api</code> artifact. If you had a dependency on <code>ackpine-ktx</code>, but didn't have an explicit dependency on <code>ackpine-core</code>, you have to add it. No API changes were introduced.</li> <li>Fix NPE causing <code>Unable to start receiver ru.solrudev.ackpine.impl.installer.receiver.PackageInstallerStatusReceiver</code> when self-updating if Ackpine version was &lt; <code>0.11.0</code> (#106).</li> <li>Fix listeners added through <code>TerminalStateListener.Binder</code> not invoking if session was already in terminal state.</li> <li>Make status bar and navigation bar fully transparent on all Android versions for session confirmation dialog Activity.</li> <li>Allow to configure install constraints timeout with <code>java.time.Duration</code>.</li> </ul>"},{"location":"changelog/#public-api-changes_5","title":"Public API changes","text":"<ul> <li>Added <code>InstallConstraints.Builder</code> constructor overload accepting <code>java.time.Duration</code>.</li> <li>Added <code>InstallConstraints.gentleUpdate()</code> static method overloads accepting <code>java.time.Duration</code>.</li> </ul>"},{"location":"changelog/#version-0111-2025-04-06","title":"Version 0.11.1 (2025-04-06)","text":""},{"location":"changelog/#dependencies_7","title":"Dependencies","text":"<ul> <li>Updated Kotlin to 2.1.20.</li> <li>Updated <code>apksig</code> to 8.9.1.</li> <li>Updated <code>kotlinx.coroutines</code> to 1.10.1.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_11","title":"Bug fixes and improvements","text":"<ul> <li>Add builder-like API for attaching <code>TerminalStateListener</code> to a session instead of subclassing it. Refer to updated documentation for usage example.</li> <li>Fix documentation for deprecated <code>ackpine-splits</code> APIs.</li> </ul>"},{"location":"changelog/#public-api-changes_6","title":"Public API changes","text":"<ul> <li>Added <code>Session.TerminalStateListener.bind()</code> static method.</li> <li>Added <code>Session.TerminalStateListener.Binder</code> class, <code>Session.TerminalStateListener.OnSuccessListener</code>, <code>Session.TerminalStateListener.OnFailureListener</code>, <code>Session.TerminalStateListener.OnCancelListener</code> functional interfaces.</li> </ul>"},{"location":"changelog/#version-0110-2025-03-04","title":"Version 0.11.0 (2025-03-04)","text":""},{"location":"changelog/#dependencies_8","title":"Dependencies","text":"<ul> <li>Updated Kotlin to 2.1.10.</li> <li>Updated <code>apksig</code> to 8.8.2.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_12","title":"Bug fixes and improvements","text":"<ul> <li> <p>Mark <code>ListenableFuture</code> result types as covariant in public API. This change is source-incompatible for Java consumers:</p> <pre><code>// Using Guava\nvar future = packageInstaller.getSessionAsync(id);\nFutures.addCallback(future, new FutureCallback&lt;ProgressSession&lt;InstallFailure&gt;&gt;() {\n//            Add explicit type here if absent ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n// ...    \n}, MoreExecutors.directExecutor());\n</code></pre> </li> <li> <p>Fix <code>SESSION_BASED</code> installer sessions not committing after process restart on API level 31-32 if <code>requireUserAction</code> is <code>false</code> and user's confirmation for this session was already requested previously nevertheless.</p> </li> <li>Add overloads accepting icon for <code>preapproval</code> <code>InstallParameters</code> DSL in <code>ackpine-ktx</code>.</li> <li>Mark <code>requireUserAction</code> setters as delicate API, as this option is unstable for use on different Android versions. Check documentation for more details.</li> <li>Raise <code>ackpine-splits</code> APIs deprecation level to error.</li> </ul>"},{"location":"changelog/#public-api-changes_7","title":"Public API changes","text":"<ul> <li>Marked <code>ListenableFuture</code> result types as covariant in <code>PackageInstaller</code> and <code>PackageUninstaller</code>.</li> <li>Raised deprecation level to error for <code>ApkSplits.throwOnInvalidSplitPackage()</code>, <code>ApkSplits.sortedByCompatibility()</code>, <code>ApkSplits.filterCompatible()</code>, <code>ApkSplits.addAllTo()</code> methods and <code>ApkCompatibility</code> class in <code>ackpine-splits</code>.</li> <li>Marked <code>requireUserAction</code> setter in <code>InstallParametersDsl</code> and <code>InstallParameters.Builder.setRequireUserAction()</code> as delicate APIs.</li> <li>Added <code>InstallParametersDsl.preapproval()</code> overloads accepting <code>Uri</code> of an icon.</li> <li>Added <code>InstallPreapproval</code> factory function overloads accepting <code>Uri</code> of an icon.</li> </ul>"},{"location":"changelog/#version-0102-2025-02-09","title":"Version 0.10.2 (2025-02-09)","text":""},{"location":"changelog/#bug-fixes-and-improvements_13","title":"Bug fixes and improvements","text":"<ul> <li>Fix <code>SessionBasedInstallConfirmationActivity was finished by user</code> failure after granting permission and confirming installation on some devices with Android 12-13 (#108).</li> </ul>"},{"location":"changelog/#version-0101-2025-01-29","title":"Version 0.10.1 (2025-01-29)","text":""},{"location":"changelog/#bug-fixes-and-improvements_14","title":"Bug fixes and improvements","text":"<ul> <li>Fix a corner case when simultaneously pressing system Back button and Install while confirming installation may result in install session's failure (#104).</li> </ul>"},{"location":"changelog/#public-api-changes_8","title":"Public API changes","text":"<ul> <li>Deprecated with warning <code>ApkCompatibility</code> class in <code>ackpine-splits</code>.</li> </ul>"},{"location":"changelog/#version-0100-2025-01-24","title":"Version 0.10.0 (2025-01-24)","text":""},{"location":"changelog/#dependencies_9","title":"Dependencies","text":"<ul> <li>Updated Gradle wrapper to 8.12.</li> <li>Updated Android Gradle Plugin to 8.8.0.</li> <li>Updated <code>apksig</code> to 8.8.0.</li> <li>Updated ViewBindingPropertyDelegate to 2.0.0 (sample apps dependency).</li> <li>Added <code>api</code> dependency on Guava's <code>ListenableFuture</code> in <code>ackpine-splits</code>.</li> <li>Added <code>implementation</code> dependency on <code>androidx.concurrent:concurrent-futures</code> in <code>ackpine-splits</code> and <code>ackpine-runtime</code>.</li> <li>Changed <code>ackpine-splits</code> dependency to <code>ackpine-splits-ktx</code> in <code>sample-ktx</code>.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_15","title":"Bug fixes and improvements","text":"<ul> <li>Repeat displaying confirmation notification if it was dismissed on Android 14+ when session's confirmation is set to <code>DEFERRED</code>.</li> <li>Introduce <code>SplitPackage</code> API in <code>ackpine-splits</code>.</li> <li>Deprecate some APIs for <code>Apk</code> sequences in <code>ackpine-splits</code>. Migrate to <code>SplitPackage</code> API.</li> <li>Rename <code>ApkSplits.throwOnInvalidSplitPackage()</code> to <code>ApkSplits.validate()</code> in <code>ackpine-splits</code>.</li> <li>Add support for cancellation in <code>Apk.fromUri()</code> in <code>ackpine-splits</code>.</li> </ul>"},{"location":"changelog/#public-api-changes_9","title":"Public API changes","text":"<ul> <li>Added <code>SplitPackage</code> and related APIs in <code>ackpine-splits</code>.</li> <li>Added <code>ackpine-splits-ktx</code> module.</li> <li>Added <code>Apk.fromUri()</code> overload accepting <code>CancellationSignal</code> in <code>ackpine-splits</code>.</li> <li>Added <code>ApkSplits.validate()</code> in <code>ackpine-splits</code>.</li> <li>Exposed <code>CloseableSequence</code> interface in <code>ackpine-splits</code>.</li> <li>Deprecated with warning <code>ApkSplits.throwOnInvalidSplitPackage()</code>, <code>ApkSplits.sortedByCompatibility()</code>, <code>ApkSplits.filterCompatible()</code> and <code>ApkSplits.addAllTo()</code> methods in <code>ackpine-splits</code>.</li> <li>Changed return type of <code>ZippedApkSplits.getApksForFile()</code> and <code>ZippedApkSplits.getApksForUri()</code> to <code>CloseableSequence&lt;Apk&gt;</code> in <code>ackpine-splits</code>.</li> <li>Removed deprecated <code>SessionResult</code> and <code>Session.await()</code> overload in <code>ackpine-ktx</code>.</li> </ul>"},{"location":"changelog/#version-094-2025-01-04","title":"Version 0.9.4 (2025-01-04)","text":""},{"location":"changelog/#bug-fixes-and-improvements_16","title":"Bug fixes and improvements","text":"<ul> <li>Correct error handling when closing I/O resources.</li> </ul>"},{"location":"changelog/#version-093-2024-12-25","title":"Version 0.9.3 (2024-12-25)","text":""},{"location":"changelog/#dependencies_10","title":"Dependencies","text":"<ul> <li>Updated KSP to 2.0.21-1.0.28.</li> <li>Updated Android Gradle Plugin to 8.7.3.</li> <li>Updated <code>apksig</code> to 8.7.3.</li> <li>Updated <code>binary-compatibility-validator</code> to 0.17.0.</li> <li>Updated <code>androidx.navigation</code> to 2.8.5 (sample apps dependency).</li> <li>Updated Guava to 33.4.0-android (sample apps dependency).</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_17","title":"Bug fixes and improvements","text":"<ul> <li>Raise <code>compileSdk</code> to 35.</li> <li>Use random access when parsing APK on API level 26+ in <code>Apk.fromUri()</code>. This greatly improves performance for large APKs.</li> <li>Add <code>ZippedFileProvider.getUriForZipEntry()</code> overloads for <code>File</code> and <code>Uri</code>.</li> <li>Raise <code>targetSdk</code> for sample apps to 35.</li> <li>Proper support for edge-to-edge display in sample apps.</li> </ul>"},{"location":"changelog/#public-api-changes_10","title":"Public API changes","text":"<ul> <li>Added <code>getUriForZipEntry(File, String)</code> and <code>getUriForZipEntry(Uri, String)</code> to <code>ZippedFileProvider.Companion</code> and as static <code>ZippedFileProvider</code> methods.</li> </ul>"},{"location":"changelog/#version-092-2024-12-19","title":"Version 0.9.2 (2024-12-19)","text":""},{"location":"changelog/#bug-fixes-and-improvements_18","title":"Bug fixes and improvements","text":"<ul> <li>Fix <code>SESSION_BASED</code> installer session completing with \"Install permission denied\" failure when performing a self-update if install permission was not granted because it was unnecessary.</li> </ul>"},{"location":"changelog/#version-091-2024-12-14","title":"Version 0.9.1 (2024-12-14)","text":""},{"location":"changelog/#bug-fixes-and-improvements_19","title":"Bug fixes and improvements","text":"<ul> <li>Proper support of dynamic features for split APKs (#95).</li> <li>Add documentation for <code>Apk</code> properties.</li> </ul>"},{"location":"changelog/#public-api-changes_11","title":"Public API changes","text":"<ul> <li>Added <code>Apk.ConfigSplit</code> sealed interface in <code>ackpine-splits</code> module.</li> <li>Added <code>configForSplit</code> property to <code>Apk.Libs</code>, <code>Apk.ScreenDensity</code> and <code>Apk.Localization</code> in <code>ackpine-splits</code> module.</li> </ul>"},{"location":"changelog/#version-090-2024-12-07","title":"Version 0.9.0 (2024-12-07)","text":""},{"location":"changelog/#dependencies_11","title":"Dependencies","text":"<ul> <li>Updated Dokka to 2.0.0-Beta.</li> <li>Updated Gradle wrapper to 8.11.1.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_20","title":"Bug fixes and improvements","text":"<ul> <li>Introduce <code>InstallPreapproval</code> API. See documentation on usage.</li> <li>Introduce <code>InstallConstraints</code> API. See documentation on usage.</li> <li>Add <code>requestUpdateOwnership</code> option for install sessions. Permission <code>ENFORCE_UPDATE_OWNERSHIP</code> was added to <code>AndroidManifest.xml</code>.</li> <li>Add <code>packageSource</code> option for install sessions.</li> <li> <p>Add <code>dontKillApp</code> option for install sessions with <code>InheritExisting</code> install mode.</p> </li> <li> <p>Source-incompatible: deprecate <code>SessionResult</code> and return <code>Session.State.Completed</code> from <code>Session.await()</code>.</p> <p><code>SessionResult</code> was an early design leftover which was mistakenly overlooked. Now it's finally been dealt with.</p> <p>To migrate, change <code>SessionResult.Success</code> to <code>Session.State.Succeeded</code>, and <code>SessionResult.Error</code> to <code>Session.State.Failed</code>. <code>cause</code> property of <code>SessionResult.Error</code> is replaced with <code>failure</code> property of <code>Session.State.Failed</code>.</p> <pre><code>// Old\nwhen (val result = session.await()) {\n    is SessionResult.Success -&gt; println(\"Success\")\n    is SessionResult.Error -&gt; println(result.cause.message)\n}\n\n// New\nwhen (val result = session.await()) {\n    Session.State.Succeeded -&gt; println(\"Success\")\n    is Session.State.Failed -&gt; println(result.failure.message)\n}\n</code></pre> </li> <li> <p>Source-incompatible: <code>when</code> matches on <code>InstallFailure</code> and <code>UninstallFailure</code> type are no longer exhaustive.</p> <p>This change was made to guard against possible additions of failure types in future Android versions, like <code>Timeout</code> in Android 14.</p> </li> <li> <p>Fix session not launching after process restart if it was in the midst of preparations.</p> </li> <li>Show notification for <code>SESSION_BASED</code> install sessions when <code>DEFERRED</code> confirmation is set only if user action is actually required.</li> <li>Fix possible races when <code>ListenableFutures</code> returned from <code>getSessionsAsync()</code> and <code>getActiveSessionsAsync()</code> might not get completed.</li> <li>Lower API level required for <code>READ_EXTERNAL_STORAGE</code> permission in sample apps.</li> <li>Add <code>sample-api34</code> sample project.</li> <li>Add \"Building\" section to documentation.</li> </ul>"},{"location":"changelog/#public-api-changes_12","title":"Public API changes","text":"<ul> <li>Source-incompatible: <code>Session.await()</code> now returns <code>Session.State.Completed</code>. Overload returning <code>SessionResult</code> is left for binary compatibility, but will be removed in the next minor version.</li> <li>Source-incompatible: <code>when</code> matches on <code>InstallFailure</code> and <code>UninstallFailure</code> type are no longer exhaustive.</li> <li>Deprecated: <code>SessionResult</code> is deprecated and will be removed in the next minor version.</li> <li>Added <code>InstallPreapproval</code> class and related APIs to <code>InstallParameters</code>, <code>InstallParameters.Builder</code> and <code>InstallParametersDsl</code>.</li> <li>Added <code>InstallConstraints</code> class and related APIs to <code>InstallParameters</code>, <code>InstallParameters.Builder</code> and <code>InstallParametersDsl</code>.</li> <li>Added <code>dontKillApp</code> boolean property to <code>InstallMode.InheritExisting</code>.</li> <li>Added <code>requestUpdateOwnership</code> property to <code>InstallParameters</code>, <code>InstallParameters.Builder</code> and <code>InstallParametersDsl</code>.</li> <li>Added <code>PackageSource</code> class and related APIs to <code>InstallParameters</code>, <code>InstallParameters.Builder</code> and <code>InstallParametersDsl</code>.</li> </ul>"},{"location":"changelog/#version-083-2024-11-07","title":"Version 0.8.3 (2024-11-07)","text":""},{"location":"changelog/#bug-fixes-and-improvements_21","title":"Bug fixes and improvements","text":"<ul> <li>Return <code>Aborted</code> failure when <code>INTENT_BASED</code> install session is cancelled.</li> <li>Return <code>Aborted</code> failure when uninstall via <code>ACTION_UNINSTALL_PACKAGE</code> is cancelled.</li> <li>Request permissions if they're not granted when sample apps are launched via <code>ACTION_VIEW</code> intent.</li> </ul>"},{"location":"changelog/#version-082-2024-11-01","title":"Version 0.8.2 (2024-11-01)","text":""},{"location":"changelog/#bug-fixes-and-improvements_22","title":"Bug fixes and improvements","text":"<ul> <li>Fix introduced in 0.8.1 repeated install confirmation after granting install permission if confirmation was dismissed by clicking outside of confirmation dialog on some OS versions.</li> <li>Don't use <code>requireUserAction</code> option in samples as it's unstable with different vendors and OS versions.</li> </ul>"},{"location":"changelog/#version-081-2024-10-31","title":"Version 0.8.1 (2024-10-31)","text":""},{"location":"changelog/#dependencies_12","title":"Dependencies","text":"<ul> <li>Updated Kotlin to 2.0.21.</li> <li>Updated <code>androidx.annotation</code> to 1.9.1.</li> <li>Updated <code>androidx.activity</code> to 1.9.3 (sample apps dependency).</li> <li>Updated <code>androidx.constraintlayout</code> to 2.2.0 (sample apps dependency).</li> <li>Updated <code>androidx.lifecycle</code> to 2.8.7 (sample apps dependency).</li> <li>Updated <code>androidx.navigation</code> to 2.8.3 (sample apps dependency).</li> <li>Updated Guava to 33.3.1-android (sample apps dependency).</li> <li>Migrated from <code>gradle-nexus/publish-plugin</code> to <code>vanniktech/gradle-maven-publish-plugin</code> for publishing artifacts to Maven Central.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_23","title":"Bug fixes and improvements","text":"<ul> <li>Fix install confirmation from OS not displaying after granting install permission on some devices (particularly Android TV) using <code>SESSION_BASED</code> installer. This is a fix for #84.</li> <li>Fix various issues with dismissing install confirmation from OS via clicking outside of confirmation dialog using <code>SESSION_BASED</code> installer.</li> </ul>"},{"location":"changelog/#version-080-2024-10-25","title":"Version 0.8.0 (2024-10-25)","text":""},{"location":"changelog/#dependencies_13","title":"Dependencies","text":"<ul> <li>Extracted <code>ackpine-resources</code> artifact, which is now depended upon by <code>ackpine-core</code>.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_24","title":"Bug fixes and improvements","text":"<ul> <li> <p><code>NotificationString</code> is superseded by <code>ResolvableString</code> to accommodate stable string resources resolution. <code>ResolvableString</code> is now located in <code>ackpine-resources</code> artifact and can also be used separately for general app needs. <code>NotificationString</code> is deprecated and will be removed in next minor release.</p> <p>To migrate <code>NotificationString.resource()</code> usages to <code>ResolvableString</code>, create classes inheriting from <code>ResolvableString.Resource</code> like this: <pre><code>// Old\nNotificationString.resource(R.string.install_message, fileName)\n\n// New\nclass InstallMessage(fileName: String) : ResolvableString.Resource(fileName) {\n    override fun stringId() = R.string.install_message\n    private companion object {\n        private const val serialVersionUID = 4749568844072243110L\n    }\n}\n\nInstallMessage(fileName)\n</code></pre></p> <p>Note that this requires to purge internal database because of incompatible changes, so all previous sessions will be cleared when Ackpine is updated to 0.8.0.</p> </li> <li> <p><code>NotificationData</code> now requires an instance of <code>DrawableId</code> class instead of integer drawable resource ID for icon to accommodate stable drawable resources resolution.</p> </li> <li>Don't hardcode a condition in implementation of <code>SESSION_BASED</code> sessions when Android's <code>PackageInstaller.Session</code> fails without report. It should possibly improve reliability on different devices.</li> <li>Fix progress bars on install screen not using latest value in sample apps.</li> <li>Disable cancel button when session's state is Committed in sample apps.</li> </ul>"},{"location":"changelog/#public-api-changes_13","title":"Public API changes","text":"<ul> <li>Breaking: <code>NotificationData</code>, <code>NotificationData.Builder</code> and <code>NotificationDataDsl</code> now require <code>ResolvableString</code> instead of <code>NotificationString</code> as <code>title</code> and <code>contentText</code> type. <code>NotificationString</code> is deprecated with an error deprecation level and will be removed in next minor release.</li> <li>Breaking: <code>NotificationData</code>, <code>NotificationData.Builder</code> and <code>NotificationDataDsl</code> now require <code>DrawableId</code> instead of integer as <code>icon</code> type.</li> <li>Added <code>ResolvableString</code> sealed interface in <code>ackpine-resources</code> module.</li> <li>Added <code>DrawableId</code> interface in <code>ackpine-core</code> module.</li> </ul>"},{"location":"changelog/#version-076-2024-10-12","title":"Version 0.7.6 (2024-10-12)","text":""},{"location":"changelog/#dependencies_14","title":"Dependencies","text":"<ul> <li>Reverted <code>androidx.startup</code> to 1.1.1.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_25","title":"Bug fixes and improvements","text":"<ul> <li><code>INTENT_BASED</code> package installer sessions are no longer stuck in <code>COMMITTED</code> state if they have performed a successful app self-update (not in all scenarios). This is an (almost) fix for issue #33.</li> <li>Use <code>ZipFile</code> API for reading <code>AndroidManifest.xml</code> when possible while parsing single APK with <code>Apk.fromFile()</code> and <code>Apk.fromUri()</code>.</li> </ul>"},{"location":"changelog/#version-075-2024-10-06","title":"Version 0.7.5 (2024-10-06)","text":""},{"location":"changelog/#bug-fixes-and-improvements_26","title":"Bug fixes and improvements","text":"<ul> <li>Improve thread-safety of <code>Session</code>, <code>PackageInstaller</code> and <code>PackageUninstaller</code> implementations.</li> <li>Fix progress changing without animation when session is committed in sample apps.</li> </ul>"},{"location":"changelog/#version-074-2024-10-04","title":"Version 0.7.4 (2024-10-04)","text":""},{"location":"changelog/#dependencies_15","title":"Dependencies","text":"<ul> <li>Added direct dependency on <code>androidx.coordinatorlayout:coordinatorlayout:1.2.0</code> to sample projects.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_27","title":"Bug fixes and improvements","text":"<ul> <li>Improve error handling in <code>ackpine-splits</code>. This also allowed to avoid duplicate <code>Apk</code> objects in sequences returned from <code>ZippedApkSplits</code> factories in some possible cases of errors.</li> <li>Fix incorrect sessions' progress when there are list items beyond visible area in sample apps.</li> <li>Hide floating Install button when scrolling down in sample apps.</li> </ul>"},{"location":"changelog/#version-073-2024-10-01","title":"Version 0.7.3 (2024-10-01)","text":""},{"location":"changelog/#bug-fixes-and-improvements_28","title":"Bug fixes and improvements","text":"<ul> <li>Fix resources not closing when throwing if <code>throwOnInvalidSplitPackage()</code> is applied and <code>ZippedApkSplits.getApksForUri()</code> delegates to <code>ZippedApkSplits.getApksForFile()</code>.</li> </ul>"},{"location":"changelog/#version-072-2024-09-30","title":"Version 0.7.2 (2024-09-30)","text":""},{"location":"changelog/#dependencies_16","title":"Dependencies","text":"<ul> <li>Updated Kotlin to 2.0.20.</li> <li>Updated Gradle wrapper to 8.9.</li> <li>Updated Android Gradle Plugin to 8.6.1.</li> <li>Updated Apache Commons Compress to 1.27.1.</li> <li>Updated <code>apksig</code> to 8.6.1.</li> <li>Updated <code>binary-compatibility-validator</code> to 0.16.3.</li> <li>Updated <code>foojay-resolver-convention</code> to 0.8.0.</li> <li>Updated <code>kotlinx.coroutines</code> to 1.9.0.</li> <li>Updated <code>androidx.startup</code> to 1.2.0.</li> <li>Updated <code>androidx.annotation</code> to 1.8.2.</li> <li>Updated <code>androidx.activity</code> to 1.9.2 (sample apps dependency).</li> <li>Updated <code>androidx.lifecycle</code> to 2.8.6 (sample apps dependency).</li> <li>Updated <code>androidx.navigation</code> to 2.8.1 (sample apps dependency).</li> <li>Updated Guava to 33.3.0-android (sample apps dependency).</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_29","title":"Bug fixes and improvements","text":"<ul> <li>Make split APKs sequences created with <code>ZippedApkSplits</code> factories cooperate with <code>throwOnInvalidSplitPackage()</code> operation. They will now close held resources when split package validation fails if not consumed in whole. Now the recommended order of applying <code>throwOnInvalidSplitPackage()</code> is immediately after creating a sequence.</li> <li>Improve documentation about split APKs.</li> <li>Fix some visual bugs with sessions' progress in sample apps.</li> <li>Disable cancel button when install session is committed in sample apps.</li> <li>Cancel sessions when ViewModel is cleared in Java sample app.</li> </ul>"},{"location":"changelog/#version-071-2024-07-03","title":"Version 0.7.1 (2024-07-03)","text":""},{"location":"changelog/#bug-fixes-and-improvements_30","title":"Bug fixes and improvements","text":"<ul> <li>Fix <code>ConcurrentModificationException</code> in <code>Session</code> in very rare cases (#70).</li> </ul>"},{"location":"changelog/#version-070-2024-07-02","title":"Version 0.7.0 (2024-07-02)","text":""},{"location":"changelog/#dependencies_17","title":"Dependencies","text":"<ul> <li>Updated Android Gradle Plugin to 8.5.0.</li> <li>Updated <code>apksig</code> to 8.5.0.</li> <li>Updated <code>androidx.concurrent</code> to 1.2.0.</li> <li>Updated <code>androidx.lifecycle</code> to 2.8.3 (sample apps dependency).</li> <li>Updated Guava to 33.2.1-android (sample apps dependency).</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_31","title":"Bug fixes and improvements","text":"<ul> <li>Fix race conditions leading to <code>SQLiteConstraintException: FOREIGN KEY constraint failed</code> (#68).</li> <li>Fix sessions getting stuck after launching when there's a lot of them created concurrently.</li> <li>Fix <code>FileNotFoundException</code> and <code>ZipException</code> when reading zipped files in some cases.</li> <li>Add support for external storage <code>Uri</code>s when trying to directly access files.</li> <li>Log APK parsing exceptions in sample apps.</li> <li>Open file picker immediately after granting all permissions in sample apps.</li> <li>Remove <code>MANAGE_EXTERNAL_STORAGE</code> permission from sample apps.</li> </ul>"},{"location":"changelog/#public-api-changes_14","title":"Public API changes","text":"<ul> <li><code>InstallMode.Companion</code> is made private.</li> </ul>"},{"location":"changelog/#version-061-2024-06-11","title":"Version 0.6.1 (2024-06-11)","text":""},{"location":"changelog/#dependencies_18","title":"Dependencies","text":"<ul> <li>Updated Kotlin to 2.0.0.</li> <li>Updated Gradle wrapper to 8.8.</li> <li>Updated Android Gradle Plugin to 8.4.2.</li> <li>Updated Apache Commons Compress to 1.26.2.</li> <li>Updated <code>apksig</code> to 8.4.2.</li> <li>Updated <code>kotlinx.coroutines</code> to 1.8.1.</li> <li>Updated <code>androidx.lifecycle</code> to 2.8.1 (sample apps dependency).</li> <li>Updated <code>androidx.appcompat</code> to 1.7.0 (sample apps dependency).</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_32","title":"Bug fixes and improvements","text":"<ul> <li>Introduce an API for deleting previously created Ackpine's notification channel.</li> <li>Add info about notification channel initialization to documentation.</li> </ul>"},{"location":"changelog/#public-api-changes_15","title":"Public API changes","text":"<ul> <li>Added <code>Ackpine.deleteNotificationChannel()</code> static method in <code>ackpine-core</code> module.</li> </ul>"},{"location":"changelog/#version-060-2024-05-20","title":"Version 0.6.0 (2024-05-20)","text":""},{"location":"changelog/#dependencies_19","title":"Dependencies","text":"<ul> <li>Updated Kotlin to 1.9.24.</li> <li>Updated <code>androidx.annotation</code> to 1.8.0.</li> <li>Updated <code>androidx.activity</code> to 1.9.0 (sample apps dependency).</li> <li>Updated Guava to 33.2.0-android (sample apps dependency).</li> <li>Updated Material Components to 1.12.0 (sample apps dependency).</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_33","title":"Bug fixes and improvements","text":"<ul> <li>Introduce an install mode option for <code>InstallParameters</code>.</li> <li>More consistent behavior of <code>COMMITTED</code> session state notifications when installer app is privileged for silent installs.</li> </ul>"},{"location":"changelog/#public-api-changes_16","title":"Public API changes","text":"<ul> <li>Added <code>InstallMode</code> sealed interface with two children (<code>Full</code> and <code>InheritExisting</code>) in <code>ackpine-core</code> module.</li> <li>Added <code>installMode</code> property to <code>InstallParameters</code> and its builder in <code>ackpine-core</code> module.</li> <li>Added <code>installMode</code> property to <code>InstallParametersDsl</code> in <code>ackpine-ktx</code> module.</li> </ul>"},{"location":"changelog/#version-055-2024-04-29","title":"Version 0.5.5 (2024-04-29)","text":""},{"location":"changelog/#bug-fixes-and-improvements_34","title":"Bug fixes and improvements","text":"<ul> <li>Fix some internal state of <code>SESSION_BASED</code> package installer session when it's in terminal state and is being initialized on retrieval from <code>PackageInstaller</code>.</li> </ul>"},{"location":"changelog/#version-054-2024-04-26","title":"Version 0.5.4 (2024-04-26)","text":""},{"location":"changelog/#bug-fixes-and-improvements_35","title":"Bug fixes and improvements","text":"<ul> <li>Fix <code>SESSION_BASED</code> package installer session not notifying about transitioning into <code>Committed</code> state when installation is performed without user's action via setting <code>requireUserAction</code> to <code>false</code>.</li> <li>Fix <code>SESSION_BASED</code> package installer session not updating its progress if it's already prepared and app process is restarted.</li> <li>Don't allow to commit <code>SESSION_BASED</code> package installer session after app process restart when an actual installation process in the system is ongoing.</li> </ul>"},{"location":"changelog/#version-053-2024-04-25","title":"Version 0.5.3 (2024-04-25)","text":""},{"location":"changelog/#dependencies_20","title":"Dependencies","text":"<ul> <li>Updated Android Gradle Plugin to 8.3.2.</li> <li>Updated <code>apksig</code> to 8.3.2.</li> <li>Added Apache Commons Compress dependency to <code>ackpine-splits</code> module.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_36","title":"Bug fixes and improvements","text":"<ul> <li><code>ackpine-splits</code>: use <code>FileChannel</code> to read zipped APKs on Android Oreo+ if possible. This drastically improves performance when direct access through <code>java.io</code> APIs is not available and allows to process problematic ZIP files (such as XAPK files).</li> <li>Don't crash if exception occurs while iterating APK sequence in sample apps, and display the exception message instead.</li> </ul>"},{"location":"changelog/#version-052-2024-03-30","title":"Version 0.5.2 (2024-03-30)","text":""},{"location":"changelog/#dependencies_21","title":"Dependencies","text":"<ul> <li>Updated Kotlin to 1.9.23.</li> <li>Updated Gradle wrapper to 8.7.</li> <li>Updated Android Gradle Plugin to 8.3.1.</li> <li>Updated <code>apksig</code> to 8.3.1.</li> <li>Updated Dokka to 1.9.20.</li> <li>Updated Guava to 33.1.0-android (sample apps dependency).</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_37","title":"Bug fixes and improvements","text":"<ul> <li>Allow to commit <code>SESSION_BASED</code> package installer sessions from background when using <code>requireUserAction = false</code> and <code>Confirmation.IMMEDIATE</code>.</li> </ul>"},{"location":"changelog/#version-051-2024-02-23","title":"Version 0.5.1 (2024-02-23)","text":""},{"location":"changelog/#dependencies_22","title":"Dependencies","text":"<ul> <li>Updated Gradle wrapper to 8.6.</li> <li>Updated Android Gradle Plugin to 8.2.2.</li> <li>Updated <code>apksig</code> to 8.2.2.</li> <li>Updated <code>kotlinx.coroutines</code> to 1.8.0.</li> <li>Updated <code>binary-compatibility-validator</code> to 0.14.0 .</li> <li>Updated <code>androidx.navigation</code> to 2.7.7 (sample apps dependency).</li> <li>Updated Guava to 33.0.0-android (sample apps dependency).</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_38","title":"Bug fixes and improvements","text":"<ul> <li>Fix possibility of sessions' notification ID inconsistencies.</li> </ul>"},{"location":"changelog/#version-050-2024-02-02","title":"Version 0.5.0 (2024-02-02)","text":""},{"location":"changelog/#bug-fixes-and-improvements_39","title":"Bug fixes and improvements","text":"<ul> <li>Add support for timeout install failure introduced in API level 34.</li> <li>Add new <code>sortedByCompatibility()</code> and related APIs in <code>ackpine-splits</code> module.</li> <li>Fix documentation for <code>NotificationData</code> and related APIs.</li> <li>Don't create session object if it already exists when initializing all sessions.</li> </ul>"},{"location":"changelog/#public-api-changes_17","title":"Public API changes","text":"<ul> <li>Source-incompatible, possibly throwing in runtime: added <code>Timeout</code> child to sealed <code>InstallFailure</code> class in <code>ackpine-core</code> module.</li> <li>Added <code>ApkCompatibility</code> class in <code>ackpine-splits</code> module.</li> <li>Added extension functions for <code>Sequence&lt;Apk&gt;</code>, <code>Sequence&lt;ApkCompatibility&gt;</code>, <code>Iterable&lt;Apk&gt;</code>, <code>Iterable&lt;ApkCompatibility&gt;</code> to <code>ApkSplits</code> in <code>ackpine-splits</code> module: <code>sortedByCompatibility()</code>, <code>filterCompatible()</code>, <code>addAllTo()</code>.</li> </ul>"},{"location":"changelog/#version-044-2024-01-22","title":"Version 0.4.4 (2024-01-22)","text":""},{"location":"changelog/#bug-fixes-and-improvements_40","title":"Bug fixes and improvements","text":"<ul> <li>Prevent clients from committing a <code>SESSION_BASED</code> package installer session while it's initializing if it's already completed.</li> <li>Fix an exception when app process is restarted after returning from package uninstall confirmation.</li> </ul>"},{"location":"changelog/#version-043-2024-01-19","title":"Version 0.4.3 (2024-01-19)","text":""},{"location":"changelog/#dependencies_23","title":"Dependencies","text":"<ul> <li>Updated Kotlin to 1.9.22.</li> <li>Updated Android Gradle Plugin to 8.2.1.</li> <li>Updated <code>apksig</code> to 8.2.1.</li> <li>Updated <code>androidx.annotation</code> to 1.7.1.</li> <li>Updated <code>androidx.activity</code> to 1.8.2 (sample apps dependency).</li> <li>Updated <code>androidx.lifecycle</code> to 2.7.0 (sample apps dependency).</li> <li>Updated <code>androidx.navigation</code> to 2.7.6 (sample apps dependency).</li> <li>Updated Material Components to 1.11.0 (sample apps dependency).</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_41","title":"Bug fixes and improvements","text":"<ul> <li>Fix incorrect <code>Succeeded</code> state of <code>SESSION_BASED</code> package installer session in some cases if app is killed while installing but system installer Activity remains visible.</li> <li>Scale Ackpine thread pool size depending on available CPU cores.</li> <li>Associate APK, APKS, APKM and XAPK files with Ackpine sample app.</li> </ul>"},{"location":"changelog/#version-042-2024-01-15","title":"Version 0.4.2 (2024-01-15)","text":""},{"location":"changelog/#bug-fixes-and-improvements_42","title":"Bug fixes and improvements","text":"<ul> <li><code>PackageInstaller</code> and <code>PackageUninstaller</code> no longer throw exceptions when trying to get a session of wrong type (install session from <code>PackageUninstaller</code> and vice versa).</li> <li><code>PackageInstaller</code> and <code>PackageUninstaller</code> no longer throw exceptions when getting a list of sessions if there were both install and uninstall sessions in internal database.</li> <li>Add ProGuard rules and <code>serialVersionUID</code> for classes which are <code>Serializable</code> for more stable serialization. Note that this requires to purge internal database because of incompatible changes, so all previous sessions will be cleared when Ackpine is updated to 0.4.2.</li> </ul>"},{"location":"changelog/#version-041-2024-01-06","title":"Version 0.4.1 (2024-01-06)","text":""},{"location":"changelog/#bug-fixes-and-improvements_43","title":"Bug fixes and improvements","text":"<ul> <li><code>SESSION_BASED</code> package installer sessions are no longer stuck in <code>COMMITTED</code> state if they have performed a successful app self-update. This is a partial fix for issue #33.</li> </ul>"},{"location":"changelog/#version-040-2023-12-11","title":"Version 0.4.0 (2023-12-11)","text":""},{"location":"changelog/#bug-fixes-and-improvements_44","title":"Bug fixes and improvements","text":"<ul> <li>Improve documentation for <code>Session.launch()</code> and <code>Session.commit()</code> and make them return a boolean to indicate whether their invocation took effect.</li> <li>Add <code>isCompleted</code> and <code>isCancelled</code> boolean properties to <code>Session</code>.</li> </ul>"},{"location":"changelog/#public-api-changes_18","title":"Public API changes","text":"<ul> <li>Breaking: <code>Session.DefaultStateListener</code> is renamed to <code>Session.TerminalStateListener</code>.</li> <li>Breaking: <code>Session.State.isCompleted</code> is removed.</li> <li>Possibly breaking: <code>isCompleted</code> and <code>isCancelled</code> boolean properties are added to <code>Session</code>.</li> <li>Possibly breaking: <code>Session.launch()</code> and <code>Session.commit()</code> now return <code>Boolean</code>.</li> </ul>"},{"location":"changelog/#version-032-2023-12-01","title":"Version 0.3.2 (2023-12-01)","text":""},{"location":"changelog/#dependencies_24","title":"Dependencies","text":"<ul> <li>Updated Kotlin to 1.9.21.</li> <li>Updated Gradle wrapper to 8.5.</li> <li>Updated Android Gradle Plugin to 8.2.0.</li> <li>Updated <code>apksig</code> to 8.2.0.</li> <li>Updated <code>androidx.room</code> to 2.6.1.</li> <li>Updated <code>androidx.activity</code> to 1.8.1 (sample apps dependency).</li> <li>Updated Guava to 32.1.3-android (sample apps dependency).</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_45","title":"Bug fixes and improvements","text":"<ul> <li>Add Afrikaans translations for South Africa. Thanks to @MJJacobs01!</li> </ul>"},{"location":"changelog/#version-031-2023-11-10","title":"Version 0.3.1 (2023-11-10)","text":""},{"location":"changelog/#bug-fixes-and-improvements_46","title":"Bug fixes and improvements","text":"<ul> <li>Don't throw from install parameters builder constructor which accepts <code>Iterable</code>, from <code>add()</code> and <code>addAll()</code> methods on API levels &lt; 21 if only a single APK ends up in <code>ApkList</code>. This fixes a long-lasting issue of throwing when getting a session from <code>PackageInstaller</code> after process restart on API levels &lt; 21.</li> </ul>"},{"location":"changelog/#version-030-2023-11-09","title":"Version 0.3.0 (2023-11-09)","text":""},{"location":"changelog/#dependencies_25","title":"Dependencies","text":"<ul> <li>Extracted <code>ackpine-runtime</code> artifact, which is now depended upon by <code>ackpine-core</code> and <code>ackpine-splits</code>. <code>ackpine-splits</code> now doesn't declare a transitive dependency on <code>ackpine-core</code>.</li> <li><code>ackpine-ktx</code> now depends on <code>androidx.concurrent:concurrent-futures-ktx</code> instead of <code>androidx.concurrent:concurrent-futures</code>.</li> <li>Updated Kotlin to 1.9.20.</li> <li>Updated Android Gradle Plugin to 8.1.3.</li> <li>Updated <code>apksig</code> to 8.1.3.</li> <li>Updated <code>androidx.navigation</code> to 2.7.5 (sample apps dependency).</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_47","title":"Bug fixes and improvements","text":"<ul> <li>Return dummy <code>DisposableSubscription</code> object when attempting to add an already registered listener to a session instead of a new one each time.</li> <li>Don't notify an already registered listener with snapshot of current session's state or progress when attempting to add it again.</li> <li>Require a <code>DisposableSubscriptionContainer</code> when adding a listener to a session to avoid an error-prone practice of adding the subscription to a subscriptions bag manually. Documentation and Java sample app were updated accordingly.</li> <li>Make confirmation Activity appear less jarring on finish.</li> </ul>"},{"location":"changelog/#public-api-changes_19","title":"Public API changes","text":"<ul> <li>Breaking: <code>Session.addStateListener()</code> and <code>ProgressSession.addProgressListener()</code> now require a <code>DisposableSubscriptionContainer</code> to be provided.</li> <li>Extension functions <code>PackageInstaller.getSession()</code>, <code>PackageInstaller.getSessions()</code>, <code>PackageInstaller.getActiveSessions()</code> and their respective counterparts for <code>PackageUninstaller</code> are not inline functions anymore.</li> </ul>"},{"location":"changelog/#version-022-2023-11-03","title":"Version 0.2.2 (2023-11-03)","text":""},{"location":"changelog/#bug-fixes-and-improvements_48","title":"Bug fixes and improvements","text":"<ul> <li>Fix duplicate session's state change notifications in some cases (e.g. after process restart and re-attaching a listener when session's been completed right before). This also fixes <code>IllegalStateException</code> in <code>Session.await()</code> in these cases.</li> <li>Make confirmation's background fully transparent.</li> <li>Don't display loading indicator during confirmation from system.</li> </ul>"},{"location":"changelog/#version-021-2023-10-30","title":"Version 0.2.1 (2023-10-30)","text":""},{"location":"changelog/#bug-fixes-and-improvements_49","title":"Bug fixes and improvements","text":"<ul> <li>Fix issues with incorrect sessions behavior when multiple session confirmations are active simultaneously and are stacked up on each other.</li> <li>Remove unnecessary Activity flags from <code>AndroidManifest.xml</code>.</li> </ul>"},{"location":"changelog/#version-020-2023-10-28","title":"Version 0.2.0 (2023-10-28)","text":""},{"location":"changelog/#dependencies_26","title":"Dependencies","text":"<ul> <li>Updated AndroidX Room to 2.6.0.</li> <li>Updated RecyclerView to 1.3.2 (sample apps dependency).</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_50","title":"Bug fixes and improvements","text":"<ul> <li>Remove intrusive behavior of <code>DEFERRED</code> confirmation: dismissing keyguard, using full-screen intent. <code>USE_FULL_SCREEN_INTENT</code> and <code>DISABLE_KEYGUARD</code> permissions were removed. Also it allowed to make <code>DEFERRED</code> confirmation's behavior consistent on old and new Android versions, as on old versions full-screen intent behaved like <code>IMMEDIATE</code> confirmation.</li> <li>Enable vibration and lights for library's notification channel.</li> <li>Make confirmation's background semi-transparent.</li> <li>Fix incorrect handling of <code>file:</code> URIs in sample apps.</li> <li>Add documentation about permissions and library's architecture.</li> </ul>"},{"location":"changelog/#version-016-2023-10-17","title":"Version 0.1.6 (2023-10-17)","text":""},{"location":"changelog/#dependencies_27","title":"Dependencies","text":"<ul> <li>Updated Dokka to 1.9.10 Beta.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_51","title":"Bug fixes and improvements","text":"<ul> <li>Extend from <code>FileProvider</code> and declare it in <code>AndroidManifest.xml</code> instead to avoid possible issues and providers conflicts.</li> </ul>"},{"location":"changelog/#version-015-2023-10-11","title":"Version 0.1.5 (2023-10-11)","text":""},{"location":"changelog/#bug-fixes-and-improvements_52","title":"Bug fixes and improvements","text":"<ul> <li>Fix an issue with sessions' <code>commit()</code> implementation when it allowed to commit while session is already in the process of being committed.</li> </ul>"},{"location":"changelog/#version-014-2023-10-10","title":"Version 0.1.4 (2023-10-10)","text":"<p>This release bumps <code>compileSdk</code> to 34.</p>"},{"location":"changelog/#dependencies_28","title":"Dependencies","text":"<ul> <li>Updated Gradle wrapper to 8.4.</li> <li>Updated Android Gradle Plugin to 8.1.2.</li> <li>Updated <code>apksig</code> to 8.1.2.</li> <li>Updated <code>androidx.annotation</code> to 1.7.0.</li> <li>Updated <code>androidx.core</code> to 1.12.0.</li> <li>Updated <code>androidx.activity</code> to 1.8.0 (sample apps dependency).</li> <li>Updated <code>androidx.lifecycle</code> to 2.6.2 (sample apps dependency).</li> <li>Updated <code>androidx.navigation</code> to 2.7.4 (sample apps dependency).</li> <li>Updated Material Components to 1.10.0 (sample apps dependency).</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_53","title":"Bug fixes and improvements","text":"<ul> <li>Make it possible to commit an arbitrary session more than once (if its confirmation was interrupted, e.g. by completely exiting the app).</li> <li>Update <code>compileSdk</code> and sample apps' <code>targetSdk</code> to 34.</li> <li>Change primary color of color scheme in sample apps to match the logo.</li> </ul>"},{"location":"changelog/#version-013-2023-09-23","title":"Version 0.1.3 (2023-09-23)","text":"<p>Added a logo for the library! Sample apps icon now uses the logo too.</p>"},{"location":"changelog/#bug-fixes-and-improvements_54","title":"Bug fixes and improvements","text":"<ul> <li>Small optimization in <code>SESSION_BASED</code> package installer.</li> </ul>"},{"location":"changelog/#version-012-2023-09-19","title":"Version 0.1.2 (2023-09-19)","text":""},{"location":"changelog/#bug-fixes-and-improvements_55","title":"Bug fixes and improvements","text":"<ul> <li>Fix deadlock in <code>SESSION_BASED</code> package installer.</li> </ul>"},{"location":"changelog/#version-011-2023-08-30","title":"Version 0.1.1 (2023-08-30)","text":""},{"location":"changelog/#bug-fixes-and-improvements_56","title":"Bug fixes and improvements","text":"<ul> <li>Add index for <code>lastLaunchTimestamp</code> internal database column.</li> </ul>"},{"location":"changelog/#version-010-2023-08-24","title":"Version 0.1.0 (2023-08-24)","text":""},{"location":"changelog/#dependencies_29","title":"Dependencies","text":"<ul> <li>Updated Kotlin to 1.9.10.</li> <li>Updated Android Gradle Plugin to 8.1.1.</li> <li>Updated <code>apksig</code> to 8.1.1.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_57","title":"Bug fixes and improvements","text":"<ul> <li>Don't add <code>DisposableSubscription</code> instance to <code>DisposableSubscriptionContainer</code> if it's already added.</li> </ul>"},{"location":"changelog/#public-api-changes_20","title":"Public API changes","text":"<ul> <li>Breaking: <code>Sequence&lt;Apk&gt;.filterIncompatible()</code> in <code>ApkSplits</code> is renamed to <code>Sequence&lt;Apk&gt;.filterCompatible()</code>.</li> </ul>"},{"location":"changelog/#version-0011-2023-08-19","title":"Version 0.0.11 (2023-08-19)","text":""},{"location":"changelog/#dependencies_30","title":"Dependencies","text":"<ul> <li>Replaced transitive <code>kotlinx-coroutines-android</code> dependency with <code>kotlinx-coroutines-core</code>.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_58","title":"Bug fixes and improvements","text":"<ul> <li>Handle sessions' cancellation synchronously.</li> <li>Fix falling back to using <code>ContentResolver</code> instead of Java File API when file path has <code>mnt/media_rw</code> in the middle.</li> </ul>"},{"location":"changelog/#version-0010-2023-08-18","title":"Version 0.0.10 (2023-08-18)","text":""},{"location":"changelog/#dependencies_31","title":"Dependencies","text":"<ul> <li>Updated Kotlin to 1.9.0.</li> <li>Updated Android Gradle Plugin to 8.1.0.</li> <li>Updated <code>apksig</code> to 8.1.0.</li> <li>Updated Gradle wrapper to 8.3.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_59","title":"Bug fixes and improvements","text":"<ul> <li>Reduce count of threads in shared Ackpine thread pool.</li> </ul>"},{"location":"changelog/#public-api-changes_21","title":"Public API changes","text":"<ul> <li>Due to updating to Kotlin 1.9, <code>entries</code> property was added to <code>Confirmation</code>, <code>InstallerType</code>, <code>Abi</code> and <code>Dpi</code> enums.</li> </ul>"},{"location":"changelog/#version-009-2023-08-16","title":"Version 0.0.9 (2023-08-16)","text":""},{"location":"changelog/#bug-fixes-and-improvements_60","title":"Bug fixes and improvements","text":"<ul> <li>Detach state listener when session reaches terminal state in <code>Session.await()</code>.</li> <li>Don't store strong references in <code>DisposableSubscription</code> implementations.</li> <li>Don't add listener instance to session if it's already registered.</li> </ul>"},{"location":"changelog/#version-008-2023-08-15","title":"Version 0.0.8 (2023-08-15)","text":""},{"location":"changelog/#bug-fixes-and-improvements_61","title":"Bug fixes and improvements","text":"<ul> <li>Fix <code>No such file or directory</code> error when using <code>INTENT_BASED</code> installer on API &lt; 24 and APK is not readable directly.</li> <li>Improve progress reports for <code>INTENT_BASED</code> installer.</li> <li>Add documentation for <code>AssetFileProvider</code>.</li> </ul>"},{"location":"changelog/#version-007-2023-08-14","title":"Version 0.0.7 (2023-08-14)","text":""},{"location":"changelog/#bug-fixes-and-improvements_62","title":"Bug fixes and improvements","text":"<ul> <li>Don't expose <code>file:</code> URIs on API level &gt;= 24 when using intent-based installer. Now <code>ackpine-core</code> artifact declares <code>FileProvider</code> in its manifest to support this.</li> </ul>"},{"location":"changelog/#version-006-2023-08-12","title":"Version 0.0.6 (2023-08-12)","text":""},{"location":"changelog/#bug-fixes-and-improvements_63","title":"Bug fixes and improvements","text":"<ul> <li>Fix incorrect handling of <code>file:</code> URIs in <code>ZippedFileProvider</code>.</li> <li>Fix NPE when iterating APKs sequence in Java sample.</li> </ul>"},{"location":"changelog/#version-005-2023-08-08","title":"Version 0.0.5 (2023-08-08)","text":""},{"location":"changelog/#bug-fixes-and-improvements_64","title":"Bug fixes and improvements","text":"<ul> <li>Allow to configure <code>requireUserAction</code> option when creating <code>InstallParameters</code>.</li> <li>Revert to not showing a full screen loading indicator after session is committed to avoid unnecessary UI interruption when user's action is not required.</li> <li>Fix session not completing with failure when navigating back from <code>SessionCommitActivity</code> on API &gt;= 33 if predictive back gesture is not enabled.</li> </ul>"},{"location":"changelog/#version-004-2023-08-04","title":"Version 0.0.4 (2023-08-04)","text":""},{"location":"changelog/#bug-fixes-and-improvements_65","title":"Bug fixes and improvements","text":"<ul> <li>Finish activity with loading indicator after install session was approved by user (using <code>SESSION_BASED</code> installer).</li> <li>Purge sessions in terminal state from internal database one day after last launch.</li> </ul>"},{"location":"changelog/#version-003-2023-08-03","title":"Version 0.0.3 (2023-08-03)","text":""},{"location":"changelog/#bug-fixes-and-improvements_66","title":"Bug fixes and improvements","text":"<ul> <li>Fix <code>IllegalStateException</code> in <code>Session.await()</code> when session has failed with an exception.</li> </ul>"},{"location":"changelog/#public-api-changes_22","title":"Public API changes","text":"<ul> <li>Now all Ackpine artifacts have different Android namespaces. Generated <code>R</code> classes coming from the library need to be re-imported if they were used in client code.</li> </ul>"},{"location":"changelog/#version-002-2023-07-31","title":"Version 0.0.2 (2023-07-31)","text":""},{"location":"changelog/#dependencies_32","title":"Dependencies","text":"<ul> <li>Updated <code>kotlinx.coroutines</code> to 1.7.3.</li> <li>Updated AndroidX Room to 2.5.2.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements_67","title":"Bug fixes and improvements","text":"<ul> <li>Show a full screen loading indicator after session is committed if it takes long to launch system confirmation activity.</li> <li>Fix race when session is failing with <code>Session $id is dead</code> instead of other reasons.</li> <li>Create session first and only then persist it in <code>PackageInstaller</code> and <code>PackageUninstaller</code> implementations to avoid persisting if session factory threw an exception.</li> <li>Fix night theme in sample app.</li> </ul>"},{"location":"changelog/#public-api-changes_23","title":"Public API changes","text":"<ul> <li>Added constructors with default values to <code>InstallFailure</code> descendants (via <code>@JvmOverloads</code>).</li> </ul>"},{"location":"changelog/#version-001-2023-07-26","title":"Version 0.0.1 (2023-07-26)","text":"<p>Initial release.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Sessions can be configured via <code>InstallParameters</code> and <code>UninstallParameters</code>.</p>"},{"location":"configuration/#session-parameters","title":"Session parameters","text":"<p>An instance of session parameters is created with a builder. <code>ackpine-ktx</code> artifact contains DSL APIs for configuring sessions.</p> <p>An example of creating a session with custom parameters:</p> KotlinJava <pre><code>val session = packageInstaller.createSession(baseApkUri) {\n    apks += apkSplitsUris\n    confirmation = Confirmation.DEFERRED\n    installerType = InstallerType.SESSION_BASED\n    installMode = InstallMode.InheritExisting(\n        packageName = \"com.example.package\",\n        dontKillApp = true\n    )\n    name = fileName\n    requireUserAction = true\n    requestUpdateOwnership = true\n    packageSource = PackageSource.Store\n    notification {\n        title = InstallMessageTitle\n        contentText = InstallMessage(fileName)\n        icon = InstallIcon\n    }\n    preapproval(\n        packageName = \"com.example.package\",\n        label = \"Sample App\",\n        locale = ULocale.US\n    ) {\n        icon = iconUri\n        fallbackToOnDemandApproval = true\n    }\n    constraints(timeout = 1.minutes) {\n        timeoutStrategy = TimeoutStrategy.CommitEagerly\n        isAppNotForegroundRequired = true\n        isAppNotInteractingRequired = true\n    }\n}\n\nobject InstallMessageTitle : ResolvableString.Resource() {\n    private const val serialVersionUID = -1310602635578779088L\n    override fun stringId() = R.string.install_message_title\n    private fun readResolve(): Any = InstallMessageTitle\n}\n\nclass InstallMessage(fileName: String) : ResolvableString.Resource(fileName) {\n    override fun stringId() = R.string.install_message\n    private companion object {\n        private const val serialVersionUID = 4749568844072243110L\n    }\n}\n\nobject InstallIcon : DrawableId {\n    private const val serialVersionUID = 3692803605642002954L\n    override fun drawableId() = R.drawable.ic_install\n    private fun readResolve(): Any = InstallIcon\n}\n</code></pre> <pre><code>var installMode = new InstallMode.InheritExisting(\"com.example.package\", true);\nvar notificationData = new NotificationData.Builder()\n        .setTitle(Resources.INSTALL_MESSAGE_TITLE)\n        .setContentText(new Resources.InstallMessage(fileName))\n        .setIcon(Resources.INSTALL_ICON)\n        .build();\nvar preapproval = new InstallPreapproval.Builder(\"com.example.package\", \"Sample App\", ULocale.US)\n        .setIcon(iconUri)\n        .setFallbackToOnDemandApproval(true)\n        .build();\nvar timeout = Duration.ofMinutes(1);\n// Or use raw millis value on older Android versions, e.g. 60000L\nvar constraints = new InstallConstraints.Builder(timeout)\n        .setTimeoutStrategy(TimeoutStrategy.COMMIT_EAGERLY)\n        .setAppNotForegroundRequired(true)\n        .setAppNotInteractingRequired(true)\n        .build();\nvar parameters = new InstallParameters.Builder(baseApkUri)\n        .addApks(apkSplitsUris)\n        .setConfirmation(Confirmation.DEFERRED)\n        .setInstallerType(InstallerType.SESSION_BASED)\n        .setInstallMode(installMode)\n        .setName(fileName)\n        .setRequireUserAction(true)\n        .setRequestUpdateOwnership(true)\n        .setPackageSource(PackageSource.STORE)\n        .setNotificationData(notificationData)\n        .setPreapproval(preapproval)\n        .setConstraints(constraints)\n        .build();\nvar session = packageInstaller.createSession(parameters);\n\npublic abstract class Resources {\n\n    public static final ResolvableString INSTALL_MESSAGE_TITLE = new InstallMessageTitle();\n    public static final DrawableId INSTALL_ICON = new InstallIcon();\n\n    private static class InstallMessageTitle extends ResolvableString.Resource {\n\n        @Serial\n        private static final long serialVersionUID = -1310602635578779088L;\n\n        @Override\n        protected int stringId() {\n            return R.string.install_message_title;\n        }\n\n        @Serial\n        private Object readResolve() {\n            return Resources.INSTALL_MESSAGE_TITLE;\n        }\n    }\n\n    public static class InstallMessage extends ResolvableString.Resource {\n\n        @Serial\n        private static final long serialVersionUID = 4749568844072243110L;\n\n        public InstallMessage(String fileName) {\n            super(fileName);\n        }\n\n        @Override\n        protected int stringId() {\n            return R.string.install_message;\n        }\n    }\n\n    private static class InstallIcon implements DrawableId {\n\n        @Serial\n        private static final long serialVersionUID = 3692803605642002954L;\n\n        @Override\n        public int drawableId() {\n            return R.drawable.ic_install;\n        }\n\n        @Serial\n        private Object readResolve() {\n            return Resources.INSTALL_ICON;\n        }\n    }\n}\n</code></pre>"},{"location":"configuration/#users-confirmation","title":"User's confirmation","text":"<p>A strategy for handling user's confirmation of installation or uninstallation. Can be <code>DEFERRED</code> (used by default) or <code>IMMEDIATE</code>.</p> <ul> <li> <p><code>DEFERRED</code> (default) \u2014 user will be shown a high-priority notification which will launch confirmation activity.</p> </li> <li> <p><code>IMMEDIATE</code> \u2014 user will be prompted to confirm installation or uninstallation right away. Suitable for launching session directly from the UI when app is in foreground.</p> </li> </ul> <p>It's also possible to configure <code>requireUserAction</code> option for install sessions. It will have effect only on API level &gt;= 31. If set to <code>false</code>, user's confirmation from system won't be triggered if some conditions are met. See the details here.</p> <p><code>requireUserAction</code> is a delicate API. This option is unstable for use on different Android versions from different vendors. It's recommended to avoid using it on API level &lt; 33 and on devices with modified OS package installer, most notably from Chinese vendors, unless your app is privileged for silent installs.</p> <p>If <code>DEFERRED</code> confirmation is never used in the app, it's possible to remove Ackpine's notification channel from the app's notification settings, which is used for posting confirmation notifications and is set up automatically. For this, disable automatic Ackpine initialization by adding the following lines to the app's <code>AndroidManifest.xml</code>: <pre><code>&lt;provider\n    android:name=\"androidx.startup.InitializationProvider\"\n    android:authorities=\"${applicationId}.androidx-startup\"\n    android:exported=\"false\"\n    tools:node=\"merge\"&gt;\n    &lt;meta-data\n        android:name=\"ru.solrudev.ackpine.AckpineInitializer\"\n        tools:node=\"remove\" /&gt;\n&lt;/provider&gt;\n</code></pre> Then, if the notification channel was already created previously, call <code>Ackpine.deleteNotificationChannel()</code> when initializing the app.</p>"},{"location":"configuration/#notification","title":"Notification","text":"<p>It is possible to provide notification title, text and icon.</p> <p>Note</p> <p>Any configuration for notification will be ignored if <code>Confirmation</code> is set to <code>IMMEDIATE</code>, because the notification will not be shown.</p> <p><code>ResolvableString</code> is a type used for <code>NotificationData</code> text values. It allows to incapsulate an Android string resource (with arguments) which will be resolved only when notification will be shown, a hardcoded string value or a default value from Ackpine library if nothing was set.</p> <p><code>android.R.drawable.ic_dialog_alert</code> is used as a default icon.</p>"},{"location":"configuration/#session-name","title":"Session name","text":"<p>Available for install sessions. You can provide an optional session <code>name</code> parameter to be used in default notification content text. It may be a name of the app being installed or a file name. It will be ignored if you specify custom notification content text or set <code>Confirmation</code> to <code>IMMEDIATE</code>.</p>"},{"location":"configuration/#installer-type","title":"Installer type","text":"<p>Available for install sessions. Ackpine supports two different package installer implementations: Android's <code>PackageInstaller</code> and an intent with <code>ACTION_INSTALL_PACKAGE</code> action. They're configured with <code>InstallerType</code> enum with entries <code>SESSION_BASED</code> and <code>INTENT_BASED</code> respectively.</p> <p><code>InstallParameters</code> builder will maintain the following invariants when configuring the installer type:</p> <ul> <li>When on API level &lt; 21, <code>INTENT_BASED</code> is always set regardless of the provided value;</li> <li>When on API level &gt;= 21 and <code>InstallParameters.Builder.apks</code> contains more than one entry, <code>SESSION_BASED</code> is always set regardless of the provided value.</li> </ul> <p>By default, the value of installer type on API level &lt; 21 is <code>INTENT_BASED</code>, and on API level &gt;= 21 is <code>SESSION_BASED</code>.</p>"},{"location":"configuration/#install-mode","title":"Install mode","text":"<p>Available for install sessions. Takes effect only when using <code>SESSION_BASED</code> installer.</p> <ul> <li> <p><code>Full</code> (default) \u2014 mode for an install session whose staged APKs should fully replace any existing APKs for the target app.</p> </li> <li> <p><code>InheritExisting</code> \u2014 mode for an install session that should inherit any existing APKs for the target app, unless they have been explicitly overridden (based on split name) by the session.</p> <p>If there are no existing APKs for the target app, this behaves like <code>Full</code>.</p> <p>Requires package name of the app being installed. If the APKs staged in the session aren't consistent with the set package name, the install will fail.</p> <p>Optionally, it's possible to request the system to not kill any of the package's running processes as part of a session in which splits are being added by setting <code>dontKillApp</code> to <code>true</code>. This option takes effect only on API level &gt;= 34.</p> </li> </ul>"},{"location":"configuration/#preapproval","title":"Preapproval","text":"<p>Available for install sessions on API level &gt;= 34. Attempts to request the approval before committing this session. See the details here.</p> <p>Preapproval requires package name of the app being installed, label representing it and locale used to get the label to be provided. Optionally, it's possible to also provide the app's icon via <code>Uri</code>.</p> <p>If preapproval is not available on the device, session will fail. If you want to instead fall back to on-demand user approval, set the <code>fallbackToOnDemandApproval</code> property to <code>true</code> when configuring <code>InstallPreapproval</code>.</p>"},{"location":"configuration/#constraints","title":"Constraints","text":"<p>Available for install sessions on API level &gt;= 34. Constraints specify the conditions to check against for the installed packages. This can be used by app stores to deliver auto updates without disrupting the user experience (referred as gentle update) - for example, an app store might hold off updates when it find out the app to update is interacting with the user. See the details here.</p> <p>Installer waits for constraints to be satisfied, so to configure them, timeout duration is required to be provided after which installer will act based on set <code>TimeoutStrategy</code>.</p> <p><code>TimeoutStrategy</code> may be one of the following:</p> <ul> <li><code>Fail</code> (default) - installer reports failure on timeout if constraints are not met.</li> <li><code>CommitEagerly</code> - installer commits session immediately after timeout even if constraints are not met.</li> <li><code>Retry</code> - installer retries waiting for constraints to be satisfied with the same timeout if constraints were not met after the first attempt. Requires <code>retries</code> parameter to be provided when created.</li> </ul> <p>There's a preset for gentle updates which can be used like this:</p> KotlinJava <pre><code>val session = packageInstaller.createSession(apkUri) {\n    constraints = InstallConstraints.gentleUpdate(\n        timeout = 1.minutes,\n        timeoutStrategy = TimeoutStrategy.CommitEagerly // optional\n    )\n}\n</code></pre> <pre><code>var constraints = InstallConstraints.gentleUpdate(60000L,\n        /* optional */ TimeoutStrategy.COMMIT_EAGERLY);\nvar session = packageInstaller.createSession(new InstallParameters.Builder(apkUri)\n        .setConstraints(constraints)\n        .build());\n</code></pre>"},{"location":"configuration/#update-ownership","title":"Update ownership","text":"<p>Available for install sessions on API level &gt;= 34.</p> <p>Optionally indicate whether the package being installed needs the update ownership enforcement. Once the update ownership enforcement is enabled, the other installers will need the user action to update the package even if the installers have been granted the <code>INSTALL_PACKAGES</code> permission. Default to <code>false</code>. The update ownership enforcement can only be enabled on initial installation. Setting this to <code>true</code> on package update is a no-op.</p>"},{"location":"configuration/#package-source","title":"Package source","text":"<p>Available for install sessions.</p> <p>Optionally indicates the package source of the app being installed. This is informational and may be used as a signal by the system. Default value is <code>PackageSource.Unspecified</code>.</p> <p>Setting this value to <code>PackageSource.LocalFile</code> or <code>PackageSource.DownloadedFile</code> will disable restricted settings for the app being installed on API level &gt;= 33.</p>"},{"location":"configuration/#plugins","title":"Plugins","text":"<p>Ackpine supports plugins. For now they are limited to install sessions. Other limitations include affecting only sessions of <code>SESSION_BASED</code> installer by changing Android's <code>PackageInstaller</code> behavior.</p> <p>At the moment, only one Ackpine plugin exists: ShizukuPlugin.</p>"},{"location":"getting_started/","title":"Getting Started","text":"<p>To obtain an instance of <code>PackageInstaller</code> or <code>PackageUninstaller</code>, use the <code>getInstance(Context)</code> method:</p> KotlinJava <pre><code>val packageInstaller = PackageInstaller.getInstance(context)\nval packageUninstaller = PackageUninstaller.getInstance(context)\n</code></pre> <pre><code>var packageInstaller = PackageInstaller.getInstance(context);\nvar packageUninstaller = PackageUninstaller.getInstance(context);\n</code></pre>"},{"location":"getting_started/#simple-session-launch","title":"Simple session launch","text":"<p>Launching an install or uninstall session with default parameters and getting its result back is as easy as writing this:</p> KotlinJava <pre><code>try {\n    when (val result = packageInstaller.createSession(apkUri).await()) {\n        Session.State.Succeeded -&gt; println(\"Success\")\n        is Session.State.Failed -&gt; println(result.failure.message)\n    }\n} catch (cancellationException: CancellationException) {\n    println(\"Cancelled\")\n    throw cancellationException\n} catch (exception: Exception) {\n    println(exception)\n}\n</code></pre> <p>Session launches when <code>await()</code> is called.</p> <pre><code>var subscriptions = new DisposableSubscriptionContainer();\nvar parameters = new InstallParameters.Builder(apkUri).build();\nvar session = packageInstaller.createSession(parameters);\nSession.TerminalStateListener.bind(session, subscriptions)\n        .addOnCancelListener(sessionId -&gt; System.out.println(\"Cancelled\"))\n        .addOnSuccessListener(sessionId -&gt; System.out.println(\"Success\"))\n        .addOnFailureListener((sessionId, failure) -&gt; {\n            if (failure instanceof Failure.Exceptional f) {\n                System.out.println(f.getException());\n            } else {\n                System.out.println(failure.getMessage());\n            }\n        });\n</code></pre> <p>Session launches when <code>TerminalStateListener.bind()</code> is called.</p> <p>It works as long as you don't care about UI lifecycle and unpredictable situations such as process death.</p>"},{"location":"getting_started/#handling-ui-lifecycle","title":"Handling UI lifecycle","text":"<p>If you're launching a session inside of a long-living service which is not expected to be killed (such as a foreground service), the previous example is good to go. However, when you are dealing with UI components such as Activities or Fragments, it's good practice to remove attached state listeners when appropriate:</p> KotlinJava <p>When using <code>ackpine-ktx</code> artifact and calling <code>Session.await()</code>, the listener will be automatically detached when parent coroutine scope is cancelled. So if you're calling <code>await()</code> inside of a <code>viewModelScope</code> or <code>lifecycleScope</code>, it should be fine. Note that cancelling <code>await()</code> also cancels the session, this is done to respect coroutines' structured concurrency.</p> <pre><code>var subscriptions = new DisposableSubscriptionContainer();\nvar session = packageInstaller.createSession(...);\nSession.TerminalStateListener.bind(session, subscriptions)\n        .addOnSuccessListener(...)\n        .addOnFailureListener(...);\n\n// when lifecycle is destroyed\nsubscriptions.clear();\n</code></pre>"},{"location":"getting_started/#handling-process-death","title":"Handling process death","text":"<p>Handling process death is not any different with Ackpine as with any other persisted state handling. You can save a session's ID and then re-retrieve the session from <code>PackageInstaller</code>:</p> KotlinJava <pre><code>savedStateHandle[SESSION_ID_KEY] = session.id\n\n// after process restart\nval id: UUID? = savedStateHandle[SESSION_ID_KEY]\nif (id != null) {\n    val result = packageInstaller.getSession(id)?.await()\n    // or anything else you want to do with the session\n}\n</code></pre> <pre><code>savedStateHandle.set(SESSION_ID_KEY, session.getId());\n\n// after process restart\nUUID id = savedStateHandle.get(SESSION_ID_KEY);\nif (id != null) {\n    final var future = packageInstaller.getSessionAsync(id);\n    // using Guava\n    Futures.addCallback(future, new FutureCallback&lt;ProgressSession&lt;InstallFailure&gt;&gt;() {\n        @Override\n        public void onSuccess(@Nullable ProgressSession&lt;InstallFailure&gt; session) {\n            if (session != null) {\n                Session.TerminalStateListener.bind(session, subscriptions)\n                        .addOnSuccessListener(...)\n                        .addOnFailureListener(...);\n                // or anything else you want to do with the session\n            }\n        }\n\n        @Override\n        public void onFailure(@NonNull Throwable t) {\n        }\n    }, MoreExecutors.directExecutor());\n}\n</code></pre>"},{"location":"getting_started/#observing-progress","title":"Observing progress","text":"<p>Install sessions provide progress updates:</p> KotlinJava <pre><code>session.progress // Flow&lt;Progress&gt;\n    .onEach { progress -&gt;\n        updateProgress(progress.progress, progress.max)\n    }\n    .launchIn(coroutineScope)\n</code></pre> <pre><code>session.addProgressListener(subscriptions, (sessionId, progress) -&gt; {\n    updateProgress(progress.getProgress(), progress.getMax());\n});\n</code></pre>"},{"location":"getting_started/#error-handling","title":"Error handling","text":"<p>Error causes are delivered as <code>Failure</code> objects through state listener or as a return value from <code>await()</code>. They're sealed hierarchies of typed errors, and you can match on their type. For example:</p> KotlinJava <pre><code>val failure = failedResult.failure\nval error = when (failure) {\n    is InstallFailure.Aborted -&gt; \"Aborted\"\n    is InstallFailure.Blocked -&gt; \"Blocked by ${failure.otherPackageName}\"\n    is InstallFailure.Conflict -&gt; \"Conflicting with ${failure.otherPackageName}\"\n    is InstallFailure.Exceptional -&gt; failure.exception.message\n    is InstallFailure.Generic -&gt; \"Generic failure\"\n    is InstallFailure.Incompatible -&gt; \"Incompatible\"\n    is InstallFailure.Invalid -&gt; \"Invalid\"\n    is InstallFailure.Storage -&gt; \"Storage path: ${failure.storagePath}\"\n    is InstallFailure.Timeout -&gt; \"Timeout\"\n    else -&gt; \"Unknown failure\"\n}\n</code></pre> <pre><code>var error = \"\";\nif (failure instanceof InstallFailure.Aborted) {\n    error = \"Aborted\";\n} else if (failure instanceof InstallFailure.Blocked f) {\n    error = \"Blocked by \" + f.getOtherPackageName();\n} else if (failure instanceof InstallFailure.Conflict f) {\n    error = \"Conflicting with \" + f.getOtherPackageName();\n} else if (failure instanceof InstallFailure.Exceptional f) {\n    error = f.getException().getMessage();\n} else if (failure instanceof InstallFailure.Generic) {\n    error = \"Generic failure\";\n} else if (failure instanceof InstallFailure.Incompatible) {\n    error = \"Incompatible\";\n} else if (failure instanceof InstallFailure.Invalid) {\n    error = \"Invalid\";\n} else if (failure instanceof InstallFailure.Storage f) {\n    error = \"Storage path: \" + f.getStoragePath();\n} else if (failure instanceof InstallFailure.Timeout) {\n    error = \"Timeout\";\n} else {\n    error = \"Unknown failure\";\n}\n</code></pre> <p>When using <code>await()</code>, exceptions are never delivered as a <code>Failure.Exceptional</code> object. Instead, they are thrown.</p> <p>Every example on this page is using <code>PackageInstaller</code>, but APIs for <code>PackageUninstaller</code> are absolutely the same except for progress updates.</p>"},{"location":"permissions/","title":"Permissions","text":"<p>Ackpine adds the following permissions to <code>AndroidManifest.xml</code>:</p> <ul> <li><code>WRITE_EXTERNAL_STORAGE</code> \u2014 used by <code>INTENT_BASED</code> package installer to create temporary APK copy;</li> <li><code>REQUEST_INSTALL_PACKAGES</code> and <code>REQUEST_DELETE_PACKAGES</code> \u2014 self-explanatory;</li> <li><code>VIBRATE</code> \u2014 to be able to set heads-up notifications' vibration when using <code>DEFERRED</code> confirmation;</li> <li><code>POST_NOTIFICATIONS</code> \u2014 for posting notifications when using <code>DEFERRED</code> confirmation;</li> <li><code>UPDATE_PACKAGES_WITHOUT_USER_ACTION</code> \u2014 to be able to leverage <code>requireUserAction</code> feature on API &gt;= 31;</li> <li><code>ENFORCE_UPDATE_OWNERSHIP</code> \u2014 to be able to leverage update ownership enforcement feature on API &gt;= 34.</li> </ul> <p>If you don't need some of the features listed above and don't want to have unneeded permissions in your app, you can remove them from the resulting merged <code>AndroidManifest.xml</code>, but do so carefully to not break the library functionality you use:</p> <pre><code>&lt;uses-permission\n    android:name=\"android.permission.PERMISSION_TO_REMOVE\"\n    tools:node=\"remove\" /&gt;\n</code></pre>"},{"location":"samples/","title":"Samples","text":"<p>Sample app showcasing the usage of Ackpine can be found in the GitHub repository.</p> <p>It utilizes <code>ackpine-splits</code> functionality and allows to install zipped split packages as well as monolithic APKs and uninstall an application from the list of installed user applications. The sample app correctly handles process death, so install sessions aren't going to waste if Android decides to kill the app.</p> <p><code>sample-java</code> is fully written in Java, while <code>sample-ktx</code> is leveraging the <code>ackpine-ktx</code> artifact.</p> <p><code>sample-api34</code> showcases usage of features supported on API level 34 and higher, such as install pre-commit preapproval and installation constraints.</p>"},{"location":"shizuku/","title":"Shizuku","text":"<p><code>ackpine-shizuku</code> artifact provides a plugin for Ackpine which, when applied, uses Shizuku to obtain package installer service instead of plain <code>context.getPackageManager().getPackageInstaller()</code>, so that Ackpine can manage sessions on behalf of root user or ADB shell even if your app doesn't have such privileges. This enables possibility of using such flags as bypassing low target SDK of the installed app on Android 14+, requesting version downgrade, and others. Also it can bypass requirement for user's confirmation for fresh installs.</p> <p>Kotlin examples below use APIs from <code>ackpine-shizuku-ktx</code> artifact.</p>"},{"location":"shizuku/#setting-up-shizuku","title":"Setting up Shizuku","text":"<p>You can see a full guide in the Shizuku-API repository.</p> <p>Latest Shizuku-API version: </p> <p>First of all, if you don't already have Shizuku support in your app, you need to explicitly add Shizuku-API dependencies to your build:</p> Gradle version catalogbuild.gradle.kts <pre><code>[versions]\nshizuku = \"see above\"\n\n[libraries]\nshizuku-api = { module = \"dev.rikka.shizuku:api\", version.ref = \"shizuku\" }\n\n# Add this if you want to support Shizuku\nshizuku-provider = { module = \"dev.rikka.shizuku:provider\", version.ref = \"shizuku\" }\n</code></pre> <pre><code>dependencies {\n    val shizukuVersion = \"see above\"\n    implementation(\"dev.rikka.shizuku:api:$shizukuVersion\")\n\n    // Add this if you want to support Shizuku\n    implementation(\"dev.rikka.shizuku:provider:$shizukuVersion\")\n}\n</code></pre> <p>If you want to support Shizuku in addition to Sui, add <code>ShizukuProvider</code> (which comes from <code>dev.rikka.shizuku:provider</code> artifact) to your <code>AndroidManifest.xml</code>:</p> <pre><code>&lt;provider\n    android:name=\"rikka.shizuku.ShizukuProvider\"\n    android:authorities=\"${applicationId}.shizuku\"\n    android:multiprocess=\"false\"\n    android:enabled=\"true\"\n    android:exported=\"true\"\n    android:permission=\"android.permission.INTERACT_ACROSS_USERS_FULL\" /&gt;\n</code></pre> <p>Then add an <code>ackpine-shizuku</code> dependency:</p> Gradle version catalogbuild.gradle.kts <pre><code>[libraries]\nackpine-shizuku = { module = \"ru.solrudev.ackpine:ackpine-shizuku\", version.ref = \"ackpine\" }\n\n# Kotlin extensions\nackpine-shizuku-ktx = { module = \"ru.solrudev.ackpine:ackpine-shizuku-ktx\", version.ref = \"ackpine\" }\n</code></pre> <pre><code>dependencies {\n    implementation(\"ru.solrudev.ackpine:ackpine-shizuku:$ackpineVersion\")\n\n    // Kotlin extensions\n    implementation(\"ru.solrudev.ackpine:ackpine-shizuku-ktx:$ackpineVersion\")\n}\n</code></pre> <p>Attention</p> <p>Shizuku plugin for Ackpine doesn't manage Shizuku permission and binder lifecycle. You must handle these in your app to successfully use Shizuku. See the Shizuku-API guide and their demo project.</p>"},{"location":"shizuku/#using-the-plugin","title":"Using the plugin","text":"<p>To apply the plugin to an install session, just add this to your install parameters configuration:</p> KotlinJava <pre><code>val session = packageInstaller.createSession(uri) {\n    // ...some session configuration...\n    useShizuku()\n\n    // Or, if you want to configure some parameters for the plugin\n    useShizuku {\n        bypassLowTargetSdkBlock = true\n        allowTest = true\n        replaceExisting = true\n        requestDowngrade = true\n        grantAllRequestedPermissions = true\n        allUsers = true\n    }\n}\n</code></pre> <pre><code>var parameters = new InstallParameters.Builder(uri)\n        // ...some session configuration...\n        .usePlugin(ShizukuPlugin.class, ShizukuPlugin.Parameters.DEFAULT)\n        .build();\n\n// Or, if you want to configure some parameters for the plugin\nvar shizukuParameters = new ShizukuPlugin.Parameters.Builder()\n        .setBypassLowTargetSdkBlock(true)\n        .setAllowTest(true)\n        .setReplaceExisting(true)\n        .setRequestDowngrade(true)\n        .setGrantAllRequestedPermissions(true)\n        .setAllUsers(true)\n        .build()\nvar parameters = new InstallParameters.Builder(uri)\n        .usePlugin(ShizukuPlugin.class, shizukuParameters)\n        .build();\n</code></pre> <p>Note</p> <p>Shizuku versions below 11 are not supported, and with these versions installations will fall back to normal system's <code>PackageInstaller</code>, or <code>INTENT_BASED</code> installer (if was set).</p> <p>If Shizuku service is not running, or if Shizuku permission is not granted for your app, install session will fail.</p>"},{"location":"shizuku/#plugin-parameters","title":"Plugin parameters","text":"<p>By default, all flags are disabled.</p>"},{"location":"shizuku/#bypasslowtargetsdkblock","title":"<code>bypassLowTargetSdkBlock</code>","text":"<p>Flag to bypass the low target SDK version block for this install.</p>"},{"location":"shizuku/#allowtest","title":"<code>allowTest</code>","text":"<p>Flag to indicate that you want to allow test packages (those that have set android:testOnly in their manifest) to be installed.</p>"},{"location":"shizuku/#replaceexisting","title":"<code>replaceExisting</code>","text":"<p>Flag to indicate that you want to replace an already installed package, if one exists.</p>"},{"location":"shizuku/#requestdowngrade","title":"<code>requestDowngrade</code>","text":"<p>Flag to indicate that an upgrade to a lower version of a package than currently installed has been requested.</p>"},{"location":"shizuku/#grantallrequestedpermissions","title":"<code>grantAllRequestedPermissions</code>","text":"<p>Flag parameter for package install to indicate that all requested permissions should be granted to the package. If <code>allUsers</code> is set the runtime permissions will be granted to all users, otherwise only to the owner.</p>"},{"location":"shizuku/#allusers","title":"<code>allUsers</code>","text":"<p>Flag to indicate that this install should immediately be visible to all users.</p>"},{"location":"split_apks/","title":"Split APKs","text":"<p><code>ackpine-splits</code> artifact contains utilities for working with split APK files.</p> <p>Add it to your dependencies:</p> Gradle version catalogbuild.gradle.kts <pre><code>[libraries]\nackpine-splits = { module = \"ru.solrudev.ackpine:ackpine-splits\", version.ref = \"ackpine\" }\n\n# Kotlin extensions\nackpine-splits-ktx = { module = \"ru.solrudev.ackpine:ackpine-splits-ktx\", version.ref = \"ackpine\" }\n</code></pre> <pre><code>dependencies {\n    implementation(\"ru.solrudev.ackpine:ackpine-splits:$ackpineVersion\")\n\n    // Kotlin extensions\n    implementation(\"ru.solrudev.ackpine:ackpine-splits-ktx:$ackpineVersion\")\n}\n</code></pre>"},{"location":"split_apks/#reading-zipped-splits","title":"Reading zipped splits","text":"<p><code>ZippedApkSplits</code> class contains factory methods for lazy sequences of APK splits which are contained inside of a zipped file such as ZIP, APKS, APKM and XAPK.</p> KotlinJava <pre><code>val splits: CloseableSequence&lt;Apk&gt; = ZippedApkSplits.getApksForUri(zippedFileUri, context)\nval splitsList = splits.toList()\n</code></pre> <pre><code>CloseableSequence&lt;Apk&gt; splits = ZippedApkSplits.getApksForUri(zippedFileUri, context);\nList&lt;Apk&gt; splitsList = new ArrayList&lt;&gt;();\nfor (var iterator = splits.iterator(); iterator.hasNext(); ) {\n    var apk = iterator.next();\n    splitsList.add(apk);\n}\n</code></pre> <p>Attention</p> <p>Iteration of these sequences is blocking due to I/O operations. Don't iterate them on UI thread!</p> <p>As you can see, these sequences have a type of <code>CloseableSequence</code> which implements <code>AutoCloseable</code>. That means they can close all held resources, and effectively be cancelled externally at any moment with a <code>close()</code> call.</p> <p><code>Apk</code> has the following properties:</p> <pre><code>val uri: Uri\nval name: String\nval size: Long\nval packageName: String\nval versionCode: Long\nval description: String\n</code></pre> <p><code>Apk</code> has the following types: <code>Base</code> for base APK, <code>Feature</code> for a feature split, <code>Libs</code> for an APK split containing native libraries, <code>ScreenDensity</code> for an APK split containing graphic resources tailored to specific screen density, <code>Localization</code> for an APK split containing localized resources and <code>Other</code> for an unknown APK split. They also have their specific properties. Refer to API documentation for details.</p>"},{"location":"split_apks/#working-with-splits","title":"Working with splits","text":""},{"location":"split_apks/#sequences-transformations","title":"Sequences transformations","text":"<p><code>ApkSplits</code> class contains utilities for transforming <code>Apk</code> sequences. In Kotlin they appear as extensions of <code>Sequence&lt;Apk&gt;</code>.</p> <p>For sequences of APKs, the following operations are available:</p> <ul> <li><code>validate()</code> operation validates a split package and throws <code>SplitPackageException</code> if it's not valid when the sequence is iterated, while also closing all opened I/O resources. This operation cooperates with cancellation if upstream sequence supports it.</li> </ul> <p>Example:</p> KotlinJava <pre><code>val splits: CloseableSequence&lt;Apk&gt; = ZippedApkSplits\n    .getApksForUri(zippedFileUri, context)\n    .validate()\nval splitsList = try {\n    splits.toList()\n} catch (exception: SplitPackageException) {\n    println(exception)\n    emptyList()\n} \n</code></pre> <pre><code>CloseableSequence&lt;Apk&gt; splits = ZippedApkSplits.getApksForUri(zippedFileUri, context);\nCloseableSequence&lt;Apk&gt; validatedSplits = ApkSplits.validate(splits);\nList&lt;Apk&gt; splitsList = new ArrayList&lt;&gt;();\ntry {\n    for (var iterator = validatedSplits.iterator(); iterator.hasNext(); ) {\n        var apk = iterator.next();\n        splitsList.add(apk);\n    }\n} catch (SplitPackageException exception) {\n    System.out.println(exception);\n    splitsList = Collections.emptyList();\n}\n</code></pre>"},{"location":"split_apks/#splitpackage-api","title":"<code>SplitPackage</code> API","text":"<p>For manipulating split packages, you can use <code>SplitPackage</code> API.</p> <p><code>ackpine-splits-ktx</code> module contains Kotlin-idiomatic extensions which are used in the examples below.</p> <p>First, you create a <code>SplitPackage.Provider</code> from a sequence of APKs, e.g. obtained from <code>ZippedApkSplits</code>:</p> KotlinJava <pre><code>val splits = sequence.toSplitPackage()\n</code></pre> <pre><code>var splits = SplitPackage.from(sequence);\n</code></pre> <p>Then you can apply different operations to it, and when you're done, materialize it into a <code>SplitPackage</code> object:</p> KotlinJava <pre><code>val sortedSplits = splits.sortedByCompatibility(context)\nval splitPackage = sortedSplits.get() // &lt;- suspending, cancellable\n// print SplitPackage entries for libs APKs\nprintln(splitPackage.libs)\n</code></pre> <pre><code>var sortedSplits = splits.sortedByCompatibility(context);\nvar splitPackageFuture = sortedSplits.getAsync(); // cancellable\n// using Guava\nFutures.addCallback(splitPackageFuture, new FutureCallback&lt;&gt;() {\n    @Override\n    public void onSuccess(@NonNull SplitPackage splitPackage) {\n        // print SplitPackage entries for libs APKs\n        System.out.println(splitPackage.getLibs());\n    }\n\n    @Override\n    public void onFailure(@NonNull Throwable t) {\n    }\n}, MoreExecutors.directExecutor());\n</code></pre> <p>The <code>get()</code> is cancellable if split package source supports cancellation (such as <code>CloseableSequence</code>).</p> <p><code>libs</code> in the previous example is a <code>List&lt;SplitPackage.Entry&lt;Apk.Libs&gt;&gt;</code>.</p> <p>Each entry in APK lists inside of <code>SplitPackage</code> (such as <code>libs</code>, <code>localization</code> etc.) has <code>isPreferred</code> and <code>apk</code> properties:</p> <ul> <li><code>isPreferred</code> \u2014 indicates whether the APK is the most preferred for the device among all splits of the same type. By default it is <code>true</code>. When an operation which checks compatibility is applied, this flag is updated accordingly;</li> <li><code>apk</code> \u2014 <code>Apk</code> object.</li> </ul> <p><code>SplitPackage</code> can be flattened to a plain list of entries by calling <code>toList()</code>. Also you can filter out all entries where <code>isPreferred=false</code> with <code>filterPreferred()</code>:</p> KotlinJava <pre><code>val splitsList = splitPackage.toList()\nval compatibleSplits = splitPackage.filterPreferred()\n</code></pre> <pre><code>var splitsList = splitPackage.toList();\nvar compatibleSplits = splitPackage.filterPreferred();\n</code></pre> <p>List of available <code>SplitPackage.Provider</code> operations:</p> <ul> <li> <p><code>sortedByCompatibility(Context)</code> operation returns a provider that gives out APK splits sorted according to their compatibility with the device. The most preferred APK splits will appear first. If exact device's screen density, ABI or locale doesn't appear in the splits, nearest matching split is chosen as a preferred one.</p> </li> <li> <p><code>filterCompatible(Context)</code> operation filters out the splits which are not the most preferred for the device. It acts the same as applying <code>sortedByCompatibility(context)</code> to the provider and calling <code>filterPreferred()</code> for the resulting <code>SplitPackage</code>.</p> </li> </ul> <p>Full example of a pipeline:</p> KotlinJava <pre><code>val splits = ZippedApkSplits.getApksForUri(zippedFileUri, context)\n    .validate()\n    .toSplitPackage()\n    .sortedByCompatibility(context)\nval sortedSplits = try {\n    splits.get()             // &lt;- suspending, cancellable\n} catch (exception: SplitPackageException) {\n    println(exception)\n    SplitPackage.empty().get()\n}\nprintln(sortedSplits.libs)   // prints SplitPackage entries for libs APKs,\n                             // ordered by their compatibility with the device\nval splitsToInstall = sortedSplits.filterPreferred()\nsortedSplits\n    .toList()\n    .filterNot { entry -&gt; entry.isPreferred }\n    .map { entry -&gt; entry.apk }\n    .forEach(::println)      // prints incompatible APKs\n</code></pre> <pre><code>Sequence&lt;Apk&gt; zippedApkSplits = ZippedApkSplits.getApksForUri(uri, context);\nSequence&lt;Apk&gt; validatedSplits = ApkSplits.validate(zippedApkSplits);\nSplitPackage.Provider splits = SplitPackage\n        .from(validatedSplits)\n        .sortedByCompatibility(context);\n// using Guava\nFutures.addCallback(splits.getAsync(), new FutureCallback&lt;&gt;() {\n    @Override\n    public void onSuccess(@NonNull SplitPackage sortedSplits) {\n        // prints SplitPackage entries for libs APKs,\n        // ordered by their compatibility with the device\n        System.out.println(sortedSplits.getLibs());\n        var splitsToInstall = sortedSplits.filterPreferred();\n        for (var entry : sortedSplits.toList()) {\n            if (!entry.isPreferred()) {\n                System.out.println(entry.getApk()); // prints incompatible APKs\n            }\n        }\n    }\n\n    @Override\n    public void onFailure(@NonNull Throwable exception) {\n        if (exception instanceof SplitPackageException) {\n            System.out.println(exception);\n        }\n    }\n}, MoreExecutors.directExecutor());\n</code></pre>"},{"location":"split_apks/#creating-apk-splits-from-separate-files","title":"Creating APK splits from separate files","text":"<p>You can parse an APK file from a <code>File</code> or <code>Uri</code> using static <code>Apk</code> factories:</p> KotlinJava <pre><code>val apkFromFile: Apk? = Apk.fromFile(file, context)\nval apkFromUri: Apk? = Apk.fromUri(uri, context, cancellationSignal)\n</code></pre> <pre><code>Apk apkFromFile = Apk.fromFile(file, context);\nApk apkFromUri = Apk.fromUri(uri, context, cancellationSignal);\n</code></pre>"}]}